
traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002e24  08002e24  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e24  08002e24  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000030  08002e5c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002e5c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008931  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a71  00000000  00000000  0002898a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002a400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002ae28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aa7  00000000  00000000  0002b768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b23c  00000000  00000000  0004220f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082206  00000000  00000000  0004d44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf651  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  000cf6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dec 	.word	0x08002dec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002dec 	.word	0x08002dec

0800014c <button_reading>:

static uint16_t buttonAddress[3]={Button1_Pin,Button2_Pin,Button3_Pin};
static GPIO_TypeDef* buttonPort[3]={Button1_GPIO_Port,Button2_GPIO_Port,Button3_GPIO_Port};
int DURATION;
void button_reading(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<3;i++)
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e049      	b.n	80001ec <button_reading+0xa0>
	{
		longPressButton2[i]=longPressButton1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4927      	ldr	r1, [pc, #156]	; (80001fc <button_reading+0xb0>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a27      	ldr	r2, [pc, #156]	; (8000200 <button_reading+0xb4>)
 8000162:	54d1      	strb	r1, [r2, r3]
		longPressButton1[i]=HAL_GPIO_ReadPin(buttonPort[i], buttonAddress[i]);
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	4a27      	ldr	r2, [pc, #156]	; (8000204 <button_reading+0xb8>)
 8000168:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	4926      	ldr	r1, [pc, #152]	; (8000208 <button_reading+0xbc>)
 8000170:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000174:	79fc      	ldrb	r4, [r7, #7]
 8000176:	4619      	mov	r1, r3
 8000178:	4610      	mov	r0, r2
 800017a:	f001 fdf7 	bl	8001d6c <HAL_GPIO_ReadPin>
 800017e:	4603      	mov	r3, r0
 8000180:	461a      	mov	r2, r3
 8000182:	4b1e      	ldr	r3, [pc, #120]	; (80001fc <button_reading+0xb0>)
 8000184:	551a      	strb	r2, [r3, r4]
		if(longPressButton1[i]==longPressButton2[i])
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4a1c      	ldr	r2, [pc, #112]	; (80001fc <button_reading+0xb0>)
 800018a:	5cd2      	ldrb	r2, [r2, r3]
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	491c      	ldr	r1, [pc, #112]	; (8000200 <button_reading+0xb4>)
 8000190:	5ccb      	ldrb	r3, [r1, r3]
 8000192:	429a      	cmp	r2, r3
 8000194:	d127      	bne.n	80001e6 <button_reading+0x9a>
		{
			if(longPressButton3[i]!=longPressButton1[i])
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	4a1c      	ldr	r2, [pc, #112]	; (800020c <button_reading+0xc0>)
 800019a:	5cd2      	ldrb	r2, [r2, r3]
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	4917      	ldr	r1, [pc, #92]	; (80001fc <button_reading+0xb0>)
 80001a0:	5ccb      	ldrb	r3, [r1, r3]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d012      	beq.n	80001cc <button_reading+0x80>
			{
				longPressButton3[i]=longPressButton1[i];
 80001a6:	79fa      	ldrb	r2, [r7, #7]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4914      	ldr	r1, [pc, #80]	; (80001fc <button_reading+0xb0>)
 80001ac:	5c89      	ldrb	r1, [r1, r2]
 80001ae:	4a17      	ldr	r2, [pc, #92]	; (800020c <button_reading+0xc0>)
 80001b0:	54d1      	strb	r1, [r2, r3]
				if(longPressButton1[i]==BUTTON_IS_PRESSED)
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a11      	ldr	r2, [pc, #68]	; (80001fc <button_reading+0xb0>)
 80001b6:	5cd3      	ldrb	r3, [r2, r3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d114      	bne.n	80001e6 <button_reading+0x9a>
				{buttonStatus[i]=BUTTON_IS_PRESSED;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	4a14      	ldr	r2, [pc, #80]	; (8000210 <button_reading+0xc4>)
 80001c0:	2100      	movs	r1, #0
 80001c2:	54d1      	strb	r1, [r2, r3]
				DURATION=100;
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <button_reading+0xc8>)
 80001c6:	2264      	movs	r2, #100	; 0x64
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	e00c      	b.n	80001e6 <button_reading+0x9a>
				}
			}
			else
			{	DURATION--;
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <button_reading+0xc8>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	3b01      	subs	r3, #1
 80001d2:	4a10      	ldr	r2, [pc, #64]	; (8000214 <button_reading+0xc8>)
 80001d4:	6013      	str	r3, [r2, #0]
				if(DURATION<=0)
 80001d6:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <button_reading+0xc8>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	dc03      	bgt.n	80001e6 <button_reading+0x9a>
				{
					longPressButton3[i]=BUTTON_IS_RELEASED;
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <button_reading+0xc0>)
 80001e2:	2101      	movs	r1, #1
 80001e4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<3;i++)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	3301      	adds	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d9b2      	bls.n	8000158 <button_reading+0xc>
				}
			}
		}
	}
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd90      	pop	{r4, r7, pc}
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	20000050 	.word	0x20000050
 8000204:	20000010 	.word	0x20000010
 8000208:	20000008 	.word	0x20000008
 800020c:	20000004 	.word	0x20000004
 8000210:	20000000 	.word	0x20000000
 8000214:	20000054 	.word	0x20000054

08000218 <is_button_pressed>:
int is_button_pressed(int index)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(buttonStatus[index]==BUTTON_IS_PRESSED)
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <is_button_pressed+0x30>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d106      	bne.n	800023a <is_button_pressed+0x22>
	{
		buttonStatus[index]=BUTTON_IS_RELEASED;
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <is_button_pressed+0x30>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4413      	add	r3, r2
 8000232:	2201      	movs	r2, #1
 8000234:	701a      	strb	r2, [r3, #0]
		return 1;
 8000236:	2301      	movs	r3, #1
 8000238:	e000      	b.n	800023c <is_button_pressed+0x24>
	}
	else return 0;
 800023a:	2300      	movs	r3, #0
}
 800023c:	4618      	mov	r0, r3
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000

0800024c <update7SEG>:
static int time2=0;
int indexled=0;
int initial_flag=0;
int led_buffer [4];

void update7SEG (int index) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	switch (index)	{
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d003      	beq.n	8000262 <update7SEG+0x16>
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d022      	beq.n	80002a6 <update7SEG+0x5a>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		display7SEG(led_buffer[1]);
		display7SEGforled2(led_buffer[3]);
		break;
	default:
		break;
 8000260:	e043      	b.n	80002ea <update7SEG+0x9e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	4823      	ldr	r0, [pc, #140]	; (80002f4 <update7SEG+0xa8>)
 8000268:	f001 fd97 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000272:	4820      	ldr	r0, [pc, #128]	; (80002f4 <update7SEG+0xa8>)
 8000274:	f001 fd91 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027e:	481d      	ldr	r0, [pc, #116]	; (80002f4 <update7SEG+0xa8>)
 8000280:	f001 fd8b 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	481a      	ldr	r0, [pc, #104]	; (80002f4 <update7SEG+0xa8>)
 800028c:	f001 fd85 	bl	8001d9a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000290:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <update7SEG+0xac>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fc81 	bl	8000b9c <display7SEG>
		display7SEGforled2(led_buffer[2]);
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <update7SEG+0xac>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fe0c 	bl	8000ebc <display7SEGforled2>
		break;
 80002a4:	e021      	b.n	80002ea <update7SEG+0x9e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2180      	movs	r1, #128	; 0x80
 80002aa:	4812      	ldr	r0, [pc, #72]	; (80002f4 <update7SEG+0xa8>)
 80002ac:	f001 fd75 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	480f      	ldr	r0, [pc, #60]	; (80002f4 <update7SEG+0xa8>)
 80002b8:	f001 fd6f 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c2:	480c      	ldr	r0, [pc, #48]	; (80002f4 <update7SEG+0xa8>)
 80002c4:	f001 fd69 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ce:	4809      	ldr	r0, [pc, #36]	; (80002f4 <update7SEG+0xa8>)
 80002d0:	f001 fd63 	bl	8001d9a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <update7SEG+0xac>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fc5f 	bl	8000b9c <display7SEG>
		display7SEGforled2(led_buffer[3]);
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <update7SEG+0xac>)
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fdea 	bl	8000ebc <display7SEGforled2>
		break;
 80002e8:	bf00      	nop
	}
 }
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	2000006c 	.word	0x2000006c

080002fc <updatebuffer>:
void updatebuffer(int number1, int number2)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
	led_buffer[0]=number1/10;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a18      	ldr	r2, [pc, #96]	; (800036c <updatebuffer+0x70>)
 800030a:	fb82 1203 	smull	r1, r2, r2, r3
 800030e:	1092      	asrs	r2, r2, #2
 8000310:	17db      	asrs	r3, r3, #31
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	4a16      	ldr	r2, [pc, #88]	; (8000370 <updatebuffer+0x74>)
 8000316:	6013      	str	r3, [r2, #0]
	led_buffer[1]=number1%10;
 8000318:	6879      	ldr	r1, [r7, #4]
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <updatebuffer+0x70>)
 800031c:	fb83 2301 	smull	r2, r3, r3, r1
 8000320:	109a      	asrs	r2, r3, #2
 8000322:	17cb      	asrs	r3, r1, #31
 8000324:	1ad2      	subs	r2, r2, r3
 8000326:	4613      	mov	r3, r2
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	4413      	add	r3, r2
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	1aca      	subs	r2, r1, r3
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <updatebuffer+0x74>)
 8000332:	605a      	str	r2, [r3, #4]

	led_buffer[2]=number2/10;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	4a0d      	ldr	r2, [pc, #52]	; (800036c <updatebuffer+0x70>)
 8000338:	fb82 1203 	smull	r1, r2, r2, r3
 800033c:	1092      	asrs	r2, r2, #2
 800033e:	17db      	asrs	r3, r3, #31
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	4a0b      	ldr	r2, [pc, #44]	; (8000370 <updatebuffer+0x74>)
 8000344:	6093      	str	r3, [r2, #8]
	led_buffer[3]=number2%10;
 8000346:	6839      	ldr	r1, [r7, #0]
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <updatebuffer+0x70>)
 800034a:	fb83 2301 	smull	r2, r3, r3, r1
 800034e:	109a      	asrs	r2, r3, #2
 8000350:	17cb      	asrs	r3, r1, #31
 8000352:	1ad2      	subs	r2, r2, r3
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	1aca      	subs	r2, r1, r3
 800035e:	4b04      	ldr	r3, [pc, #16]	; (8000370 <updatebuffer+0x74>)
 8000360:	60da      	str	r2, [r3, #12]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	66666667 	.word	0x66666667
 8000370:	2000006c 	.word	0x2000006c

08000374 <initial>:

void initial()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	status=AUTO_RED;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <initial+0x4c>)
 800037a:	2202      	movs	r2, #2
 800037c:	601a      	str	r2, [r3, #0]
	status2=AUTO_GREEN;
 800037e:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <initial+0x50>)
 8000380:	2204      	movs	r2, #4
 8000382:	601a      	str	r2, [r3, #0]
	time1=lightbufferRun[0];
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <initial+0x54>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	461a      	mov	r2, r3
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <initial+0x58>)
 800038c:	601a      	str	r2, [r3, #0]
	time2=lightbufferRun[2];
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <initial+0x54>)
 8000390:	789b      	ldrb	r3, [r3, #2]
 8000392:	461a      	mov	r2, r3
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <initial+0x5c>)
 8000396:	601a      	str	r2, [r3, #0]
	setTimer1(1000);
 8000398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039c:	f001 f898 	bl	80014d0 <setTimer1>
	mode=1;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <initial+0x60>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
	segment_flag=1;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <initial+0x64>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	601a      	str	r2, [r3, #0]
	updatebuffer(time1, time2);
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <initial+0x58>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <initial+0x5c>)
 80003b2:	6812      	ldr	r2, [r2, #0]
 80003b4:	4611      	mov	r1, r2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ffa0 	bl	80002fc <updatebuffer>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000007c 	.word	0x2000007c
 80003c4:	20000080 	.word	0x20000080
 80003c8:	20000020 	.word	0x20000020
 80003cc:	2000005c 	.word	0x2000005c
 80003d0:	20000060 	.word	0x20000060
 80003d4:	20000058 	.word	0x20000058
 80003d8:	200000e8 	.word	0x200000e8

080003dc <traffic>:
void  traffic()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	if(status==AUTO_RED)
 80003e0:	4b97      	ldr	r3, [pc, #604]	; (8000640 <traffic+0x264>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b02      	cmp	r3, #2
 80003e6:	d12a      	bne.n	800043e <traffic+0x62>
	{
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2102      	movs	r1, #2
 80003ec:	4895      	ldr	r0, [pc, #596]	; (8000644 <traffic+0x268>)
 80003ee:	f001 fcd4 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2104      	movs	r1, #4
 80003f6:	4893      	ldr	r0, [pc, #588]	; (8000644 <traffic+0x268>)
 80003f8:	f001 fccf 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2108      	movs	r1, #8
 8000400:	4890      	ldr	r0, [pc, #576]	; (8000644 <traffic+0x268>)
 8000402:	f001 fcca 	bl	8001d9a <HAL_GPIO_WritePin>
		if(time1==0)
 8000406:	4b90      	ldr	r3, [pc, #576]	; (8000648 <traffic+0x26c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d174      	bne.n	80004f8 <traffic+0x11c>
		{
			status=AUTO_GREEN;
 800040e:	4b8c      	ldr	r3, [pc, #560]	; (8000640 <traffic+0x264>)
 8000410:	2204      	movs	r2, #4
 8000412:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2102      	movs	r1, #2
 8000418:	488a      	ldr	r0, [pc, #552]	; (8000644 <traffic+0x268>)
 800041a:	f001 fcbe 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2104      	movs	r1, #4
 8000422:	4888      	ldr	r0, [pc, #544]	; (8000644 <traffic+0x268>)
 8000424:	f001 fcb9 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	4885      	ldr	r0, [pc, #532]	; (8000644 <traffic+0x268>)
 800042e:	f001 fcb4 	bl	8001d9a <HAL_GPIO_WritePin>
			time1=lightbufferRun[2];
 8000432:	4b86      	ldr	r3, [pc, #536]	; (800064c <traffic+0x270>)
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	461a      	mov	r2, r3
 8000438:	4b83      	ldr	r3, [pc, #524]	; (8000648 <traffic+0x26c>)
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	e05c      	b.n	80004f8 <traffic+0x11c>
		}
	}
	else if(status==AUTO_YELLOW)
 800043e:	4b80      	ldr	r3, [pc, #512]	; (8000640 <traffic+0x264>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b03      	cmp	r3, #3
 8000444:	d12a      	bne.n	800049c <traffic+0xc0>
	{
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000446:	2201      	movs	r2, #1
 8000448:	2102      	movs	r1, #2
 800044a:	487e      	ldr	r0, [pc, #504]	; (8000644 <traffic+0x268>)
 800044c:	f001 fca5 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2104      	movs	r1, #4
 8000454:	487b      	ldr	r0, [pc, #492]	; (8000644 <traffic+0x268>)
 8000456:	f001 fca0 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2108      	movs	r1, #8
 800045e:	4879      	ldr	r0, [pc, #484]	; (8000644 <traffic+0x268>)
 8000460:	f001 fc9b 	bl	8001d9a <HAL_GPIO_WritePin>
		if(time1==0)
 8000464:	4b78      	ldr	r3, [pc, #480]	; (8000648 <traffic+0x26c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d145      	bne.n	80004f8 <traffic+0x11c>
		{
			status=AUTO_RED;
 800046c:	4b74      	ldr	r3, [pc, #464]	; (8000640 <traffic+0x264>)
 800046e:	2202      	movs	r2, #2
 8000470:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2102      	movs	r1, #2
 8000476:	4873      	ldr	r0, [pc, #460]	; (8000644 <traffic+0x268>)
 8000478:	f001 fc8f 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2104      	movs	r1, #4
 8000480:	4870      	ldr	r0, [pc, #448]	; (8000644 <traffic+0x268>)
 8000482:	f001 fc8a 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2108      	movs	r1, #8
 800048a:	486e      	ldr	r0, [pc, #440]	; (8000644 <traffic+0x268>)
 800048c:	f001 fc85 	bl	8001d9a <HAL_GPIO_WritePin>
			time1=lightbufferRun[0];
 8000490:	4b6e      	ldr	r3, [pc, #440]	; (800064c <traffic+0x270>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	4b6c      	ldr	r3, [pc, #432]	; (8000648 <traffic+0x26c>)
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	e02d      	b.n	80004f8 <traffic+0x11c>
		}
	}
	else if(status==AUTO_GREEN)
 800049c:	4b68      	ldr	r3, [pc, #416]	; (8000640 <traffic+0x264>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b04      	cmp	r3, #4
 80004a2:	d129      	bne.n	80004f8 <traffic+0x11c>
	{
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2102      	movs	r1, #2
 80004a8:	4866      	ldr	r0, [pc, #408]	; (8000644 <traffic+0x268>)
 80004aa:	f001 fc76 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2104      	movs	r1, #4
 80004b2:	4864      	ldr	r0, [pc, #400]	; (8000644 <traffic+0x268>)
 80004b4:	f001 fc71 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2108      	movs	r1, #8
 80004bc:	4861      	ldr	r0, [pc, #388]	; (8000644 <traffic+0x268>)
 80004be:	f001 fc6c 	bl	8001d9a <HAL_GPIO_WritePin>
		if(time1==0)
 80004c2:	4b61      	ldr	r3, [pc, #388]	; (8000648 <traffic+0x26c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d116      	bne.n	80004f8 <traffic+0x11c>
		{
			status=AUTO_YELLOW;
 80004ca:	4b5d      	ldr	r3, [pc, #372]	; (8000640 <traffic+0x264>)
 80004cc:	2203      	movs	r2, #3
 80004ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2102      	movs	r1, #2
 80004d4:	485b      	ldr	r0, [pc, #364]	; (8000644 <traffic+0x268>)
 80004d6:	f001 fc60 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2104      	movs	r1, #4
 80004de:	4859      	ldr	r0, [pc, #356]	; (8000644 <traffic+0x268>)
 80004e0:	f001 fc5b 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2108      	movs	r1, #8
 80004e8:	4856      	ldr	r0, [pc, #344]	; (8000644 <traffic+0x268>)
 80004ea:	f001 fc56 	bl	8001d9a <HAL_GPIO_WritePin>
			time1=lightbufferRun[1];
 80004ee:	4b57      	ldr	r3, [pc, #348]	; (800064c <traffic+0x270>)
 80004f0:	785b      	ldrb	r3, [r3, #1]
 80004f2:	461a      	mov	r2, r3
 80004f4:	4b54      	ldr	r3, [pc, #336]	; (8000648 <traffic+0x26c>)
 80004f6:	601a      	str	r2, [r3, #0]
		}
	}
	if(status2==AUTO_RED)
 80004f8:	4b55      	ldr	r3, [pc, #340]	; (8000650 <traffic+0x274>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d12a      	bne.n	8000556 <traffic+0x17a>
	{
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2110      	movs	r1, #16
 8000504:	484f      	ldr	r0, [pc, #316]	; (8000644 <traffic+0x268>)
 8000506:	f001 fc48 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2120      	movs	r1, #32
 800050e:	484d      	ldr	r0, [pc, #308]	; (8000644 <traffic+0x268>)
 8000510:	f001 fc43 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2140      	movs	r1, #64	; 0x40
 8000518:	484a      	ldr	r0, [pc, #296]	; (8000644 <traffic+0x268>)
 800051a:	f001 fc3e 	bl	8001d9a <HAL_GPIO_WritePin>
		if(time2==0)
 800051e:	4b4d      	ldr	r3, [pc, #308]	; (8000654 <traffic+0x278>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d174      	bne.n	8000610 <traffic+0x234>
		{
			status2=AUTO_GREEN;
 8000526:	4b4a      	ldr	r3, [pc, #296]	; (8000650 <traffic+0x274>)
 8000528:	2204      	movs	r2, #4
 800052a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2110      	movs	r1, #16
 8000530:	4844      	ldr	r0, [pc, #272]	; (8000644 <traffic+0x268>)
 8000532:	f001 fc32 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2120      	movs	r1, #32
 800053a:	4842      	ldr	r0, [pc, #264]	; (8000644 <traffic+0x268>)
 800053c:	f001 fc2d 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2140      	movs	r1, #64	; 0x40
 8000544:	483f      	ldr	r0, [pc, #252]	; (8000644 <traffic+0x268>)
 8000546:	f001 fc28 	bl	8001d9a <HAL_GPIO_WritePin>
			time2=lightbufferRun[2];
 800054a:	4b40      	ldr	r3, [pc, #256]	; (800064c <traffic+0x270>)
 800054c:	789b      	ldrb	r3, [r3, #2]
 800054e:	461a      	mov	r2, r3
 8000550:	4b40      	ldr	r3, [pc, #256]	; (8000654 <traffic+0x278>)
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e05c      	b.n	8000610 <traffic+0x234>
		}
	}
	else if(status2==AUTO_YELLOW)
 8000556:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <traffic+0x274>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b03      	cmp	r3, #3
 800055c:	d12a      	bne.n	80005b4 <traffic+0x1d8>
	{
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	4838      	ldr	r0, [pc, #224]	; (8000644 <traffic+0x268>)
 8000564:	f001 fc19 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	4835      	ldr	r0, [pc, #212]	; (8000644 <traffic+0x268>)
 800056e:	f001 fc14 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4833      	ldr	r0, [pc, #204]	; (8000644 <traffic+0x268>)
 8000578:	f001 fc0f 	bl	8001d9a <HAL_GPIO_WritePin>
		if(time2==0)
 800057c:	4b35      	ldr	r3, [pc, #212]	; (8000654 <traffic+0x278>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d145      	bne.n	8000610 <traffic+0x234>
		{
			status2=AUTO_RED;
 8000584:	4b32      	ldr	r3, [pc, #200]	; (8000650 <traffic+0x274>)
 8000586:	2202      	movs	r2, #2
 8000588:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2110      	movs	r1, #16
 800058e:	482d      	ldr	r0, [pc, #180]	; (8000644 <traffic+0x268>)
 8000590:	f001 fc03 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2120      	movs	r1, #32
 8000598:	482a      	ldr	r0, [pc, #168]	; (8000644 <traffic+0x268>)
 800059a:	f001 fbfe 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	4828      	ldr	r0, [pc, #160]	; (8000644 <traffic+0x268>)
 80005a4:	f001 fbf9 	bl	8001d9a <HAL_GPIO_WritePin>
			time2=lightbufferRun[0];
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <traffic+0x270>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <traffic+0x278>)
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	e02d      	b.n	8000610 <traffic+0x234>
		}
	}
	else if(status2==AUTO_GREEN)
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <traffic+0x274>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d129      	bne.n	8000610 <traffic+0x234>
	{
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2110      	movs	r1, #16
 80005c0:	4820      	ldr	r0, [pc, #128]	; (8000644 <traffic+0x268>)
 80005c2:	f001 fbea 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	481e      	ldr	r0, [pc, #120]	; (8000644 <traffic+0x268>)
 80005cc:	f001 fbe5 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <traffic+0x268>)
 80005d6:	f001 fbe0 	bl	8001d9a <HAL_GPIO_WritePin>
		if(time2==0)
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <traffic+0x278>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d116      	bne.n	8000610 <traffic+0x234>
		{
			status2=AUTO_YELLOW;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <traffic+0x274>)
 80005e4:	2203      	movs	r2, #3
 80005e6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2110      	movs	r1, #16
 80005ec:	4815      	ldr	r0, [pc, #84]	; (8000644 <traffic+0x268>)
 80005ee:	f001 fbd4 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4813      	ldr	r0, [pc, #76]	; (8000644 <traffic+0x268>)
 80005f8:	f001 fbcf 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <traffic+0x268>)
 8000602:	f001 fbca 	bl	8001d9a <HAL_GPIO_WritePin>
			time2=lightbufferRun[1];
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <traffic+0x270>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	461a      	mov	r2, r3
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <traffic+0x278>)
 800060e:	601a      	str	r2, [r3, #0]
		}
	}
	if((mode==1) &&(timer1_flag==1))
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <traffic+0x27c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d111      	bne.n	800063c <traffic+0x260>
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <traffic+0x280>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d10d      	bne.n	800063c <traffic+0x260>
	{
		time1--;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <traffic+0x26c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3b01      	subs	r3, #1
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <traffic+0x26c>)
 8000628:	6013      	str	r3, [r2, #0]
		time2--;
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <traffic+0x278>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3b01      	subs	r3, #1
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <traffic+0x278>)
 8000632:	6013      	str	r3, [r2, #0]
		setTimer1(1000);
 8000634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000638:	f000 ff4a 	bl	80014d0 <setTimer1>
	}
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000007c 	.word	0x2000007c
 8000644:	40010800 	.word	0x40010800
 8000648:	2000005c 	.word	0x2000005c
 800064c:	20000020 	.word	0x20000020
 8000650:	20000080 	.word	0x20000080
 8000654:	20000060 	.word	0x20000060
 8000658:	20000058 	.word	0x20000058
 800065c:	200000cc 	.word	0x200000cc

08000660 <increasedTime>:
void  increasedTime(uint8_t led)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	lightbufferMod[led]++;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <increasedTime+0x34>)
 800066e:	5cd2      	ldrb	r2, [r2, r3]
 8000670:	3201      	adds	r2, #1
 8000672:	b2d1      	uxtb	r1, r2
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <increasedTime+0x34>)
 8000676:	54d1      	strb	r1, [r2, r3]
	if(lightbufferMod[led]>99)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <increasedTime+0x34>)
 800067c:	5cd3      	ldrb	r3, [r2, r3]
 800067e:	2b63      	cmp	r3, #99	; 0x63
 8000680:	d903      	bls.n	800068a <increasedTime+0x2a>
	{
		lightbufferMod[led]=1;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <increasedTime+0x34>)
 8000686:	2101      	movs	r1, #1
 8000688:	54d1      	strb	r1, [r2, r3]
	}
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	2000001c 	.word	0x2000001c

08000698 <updateMode>:
void updateMode()
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	mode++;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <updateMode+0x28>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <updateMode+0x28>)
 80006a6:	701a      	strb	r2, [r3, #0]
	if(mode>4) mode=1;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <updateMode+0x28>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d902      	bls.n	80006b6 <updateMode+0x1e>
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <updateMode+0x28>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000058 	.word	0x20000058

080006c4 <copyModtoRun>:
void copyModtoRun()
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	for(int i=0;i<3;i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e00b      	b.n	80006e8 <copyModtoRun+0x24>
	{
		lightbufferRun[i]=lightbufferMod[i];
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <copyModtoRun+0x38>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <copyModtoRun+0x3c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	460a      	mov	r2, r1
 80006e0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	ddf0      	ble.n	80006d0 <copyModtoRun+0xc>
	}
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	2000001c 	.word	0x2000001c
 8000700:	20000020 	.word	0x20000020

08000704 <blinkLed>:
void blinkLed(uint8_t led)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	if((mode!=1)&&(blink_flag==1))
 800070e:	4b37      	ldr	r3, [pc, #220]	; (80007ec <blinkLed+0xe8>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d066      	beq.n	80007e4 <blinkLed+0xe0>
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <blinkLed+0xec>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d162      	bne.n	80007e4 <blinkLed+0xe0>
	{
		if(led==0)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11c      	bne.n	800075e <blinkLed+0x5a>
		{
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000724:	2102      	movs	r1, #2
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <blinkLed+0xf0>)
 8000728:	f001 fb4f 	bl	8001dca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 800072c:	2110      	movs	r1, #16
 800072e:	4831      	ldr	r0, [pc, #196]	; (80007f4 <blinkLed+0xf0>)
 8000730:	f001 fb4b 	bl	8001dca <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2104      	movs	r1, #4
 8000738:	482e      	ldr	r0, [pc, #184]	; (80007f4 <blinkLed+0xf0>)
 800073a:	f001 fb2e 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2120      	movs	r1, #32
 8000742:	482c      	ldr	r0, [pc, #176]	; (80007f4 <blinkLed+0xf0>)
 8000744:	f001 fb29 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2108      	movs	r1, #8
 800074c:	4829      	ldr	r0, [pc, #164]	; (80007f4 <blinkLed+0xf0>)
 800074e:	f001 fb24 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2140      	movs	r1, #64	; 0x40
 8000756:	4827      	ldr	r0, [pc, #156]	; (80007f4 <blinkLed+0xf0>)
 8000758:	f001 fb1f 	bl	8001d9a <HAL_GPIO_WritePin>
 800075c:	e03e      	b.n	80007dc <blinkLed+0xd8>
		}
		else if(led==1)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d11c      	bne.n	800079e <blinkLed+0x9a>
		{
			HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8000764:	2104      	movs	r1, #4
 8000766:	4823      	ldr	r0, [pc, #140]	; (80007f4 <blinkLed+0xf0>)
 8000768:	f001 fb2f 	bl	8001dca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 800076c:	2120      	movs	r1, #32
 800076e:	4821      	ldr	r0, [pc, #132]	; (80007f4 <blinkLed+0xf0>)
 8000770:	f001 fb2b 	bl	8001dca <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	481e      	ldr	r0, [pc, #120]	; (80007f4 <blinkLed+0xf0>)
 800077a:	f001 fb0e 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2110      	movs	r1, #16
 8000782:	481c      	ldr	r0, [pc, #112]	; (80007f4 <blinkLed+0xf0>)
 8000784:	f001 fb09 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2108      	movs	r1, #8
 800078c:	4819      	ldr	r0, [pc, #100]	; (80007f4 <blinkLed+0xf0>)
 800078e:	f001 fb04 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2140      	movs	r1, #64	; 0x40
 8000796:	4817      	ldr	r0, [pc, #92]	; (80007f4 <blinkLed+0xf0>)
 8000798:	f001 faff 	bl	8001d9a <HAL_GPIO_WritePin>
 800079c:	e01e      	b.n	80007dc <blinkLed+0xd8>
		}
		else if(led==2)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d11b      	bne.n	80007dc <blinkLed+0xd8>
		{
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 80007a4:	2108      	movs	r1, #8
 80007a6:	4813      	ldr	r0, [pc, #76]	; (80007f4 <blinkLed+0xf0>)
 80007a8:	f001 fb0f 	bl	8001dca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 80007ac:	2140      	movs	r1, #64	; 0x40
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <blinkLed+0xf0>)
 80007b0:	f001 fb0b 	bl	8001dca <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2104      	movs	r1, #4
 80007b8:	480e      	ldr	r0, [pc, #56]	; (80007f4 <blinkLed+0xf0>)
 80007ba:	f001 faee 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2120      	movs	r1, #32
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <blinkLed+0xf0>)
 80007c4:	f001 fae9 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2102      	movs	r1, #2
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <blinkLed+0xf0>)
 80007ce:	f001 fae4 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2110      	movs	r1, #16
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <blinkLed+0xf0>)
 80007d8:	f001 fadf 	bl	8001d9a <HAL_GPIO_WritePin>
		}
		setBlink(500);
 80007dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e0:	f000 fe5a 	bl	8001498 <setBlink>
	}
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000058 	.word	0x20000058
 80007f0:	200000d4 	.word	0x200000d4
 80007f4:	40010800 	.word	0x40010800

080007f8 <fsm_automatic>:
void fsm_automatic()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0


	if(is_button_pressed(button1))
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fd0b 	bl	8000218 <is_button_pressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d007      	beq.n	8000818 <fsm_automatic+0x20>
	{
		updateMode();
 8000808:	f7ff ff46 	bl	8000698 <updateMode>
		indexled=0;
 800080c:	4b89      	ldr	r3, [pc, #548]	; (8000a34 <fsm_automatic+0x23c>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
		initial_flag=1;
 8000812:	4b89      	ldr	r3, [pc, #548]	; (8000a38 <fsm_automatic+0x240>)
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
	}
	switch(mode)
 8000818:	4b88      	ldr	r3, [pc, #544]	; (8000a3c <fsm_automatic+0x244>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3b01      	subs	r3, #1
 800081e:	2b03      	cmp	r3, #3
 8000820:	f200 8189 	bhi.w	8000b36 <fsm_automatic+0x33e>
 8000824:	a201      	add	r2, pc, #4	; (adr r2, 800082c <fsm_automatic+0x34>)
 8000826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082a:	bf00      	nop
 800082c:	0800083d 	.word	0x0800083d
 8000830:	08000891 	.word	0x08000891
 8000834:	08000963 	.word	0x08000963
 8000838:	08000a65 	.word	0x08000a65
	{
	case 1:
		if(initial_flag==1)
 800083c:	4b7e      	ldr	r3, [pc, #504]	; (8000a38 <fsm_automatic+0x240>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d11a      	bne.n	800087a <fsm_automatic+0x82>
		{
			initial_flag=0;
 8000844:	4b7c      	ldr	r3, [pc, #496]	; (8000a38 <fsm_automatic+0x240>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
			status=AUTO_RED;
 800084a:	4b7d      	ldr	r3, [pc, #500]	; (8000a40 <fsm_automatic+0x248>)
 800084c:	2202      	movs	r2, #2
 800084e:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000850:	4b7c      	ldr	r3, [pc, #496]	; (8000a44 <fsm_automatic+0x24c>)
 8000852:	2204      	movs	r2, #4
 8000854:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[0];
 8000856:	4b7c      	ldr	r3, [pc, #496]	; (8000a48 <fsm_automatic+0x250>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	4b7b      	ldr	r3, [pc, #492]	; (8000a4c <fsm_automatic+0x254>)
 800085e:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[2];
 8000860:	4b79      	ldr	r3, [pc, #484]	; (8000a48 <fsm_automatic+0x250>)
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	461a      	mov	r2, r3
 8000866:	4b7a      	ldr	r3, [pc, #488]	; (8000a50 <fsm_automatic+0x258>)
 8000868:	601a      	str	r2, [r3, #0]
			indexled=0;
 800086a:	4b72      	ldr	r3, [pc, #456]	; (8000a34 <fsm_automatic+0x23c>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f000 fe2c 	bl	80014d0 <setTimer1>
		}
		else
		{traffic();
		updatebuffer(time1, time2);
		}
		break;
 8000878:	e15d      	b.n	8000b36 <fsm_automatic+0x33e>
		{traffic();
 800087a:	f7ff fdaf 	bl	80003dc <traffic>
		updatebuffer(time1, time2);
 800087e:	4b73      	ldr	r3, [pc, #460]	; (8000a4c <fsm_automatic+0x254>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a73      	ldr	r2, [pc, #460]	; (8000a50 <fsm_automatic+0x258>)
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fd37 	bl	80002fc <updatebuffer>
		break;
 800088e:	e152      	b.n	8000b36 <fsm_automatic+0x33e>
	case 2:

		if(initial_flag==1)
 8000890:	4b69      	ldr	r3, [pc, #420]	; (8000a38 <fsm_automatic+0x240>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d113      	bne.n	80008c0 <fsm_automatic+0xc8>
		{setTimer2(5000);
 8000898:	f241 3088 	movw	r0, #5000	; 0x1388
 800089c:	f000 fe34 	bl	8001508 <setTimer2>
		blink_flag=1;
 80008a0:	4b6c      	ldr	r3, [pc, #432]	; (8000a54 <fsm_automatic+0x25c>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
		initial_flag=0;
 80008a6:	4b64      	ldr	r3, [pc, #400]	; (8000a38 <fsm_automatic+0x240>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2102      	movs	r1, #2
 80008b0:	4869      	ldr	r0, [pc, #420]	; (8000a58 <fsm_automatic+0x260>)
 80008b2:	f001 fa72 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2110      	movs	r1, #16
 80008ba:	4867      	ldr	r0, [pc, #412]	; (8000a58 <fsm_automatic+0x260>)
 80008bc:	f001 fa6d 	bl	8001d9a <HAL_GPIO_WritePin>
		}
		blinkLed(RED);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff1f 	bl	8000704 <blinkLed>
		if(is_button_pressed(button2))
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fca6 	bl	8000218 <is_button_pressed>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00c      	beq.n	80008ec <fsm_automatic+0xf4>
		{
			status=MAN_RED;
 80008d2:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <fsm_automatic+0x248>)
 80008d4:	220c      	movs	r2, #12
 80008d6:	601a      	str	r2, [r3, #0]
			status2=MAN_RED;
 80008d8:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <fsm_automatic+0x24c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 80008de:	f241 3088 	movw	r0, #5000	; 0x1388
 80008e2:	f000 fe11 	bl	8001508 <setTimer2>
			increasedTime(0);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff feba 	bl	8000660 <increasedTime>
		}
		if(is_button_pressed(button3))
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff fc93 	bl	8000218 <is_button_pressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d01a      	beq.n	800092e <fsm_automatic+0x136>
		{
			copyModtoRun();
 80008f8:	f7ff fee4 	bl	80006c4 <copyModtoRun>
			mode=1;
 80008fc:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <fsm_automatic+0x244>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
			indexled=0;
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <fsm_automatic+0x23c>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[0];
 8000908:	4b4f      	ldr	r3, [pc, #316]	; (8000a48 <fsm_automatic+0x250>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b4f      	ldr	r3, [pc, #316]	; (8000a4c <fsm_automatic+0x254>)
 8000910:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[2];
 8000912:	4b4d      	ldr	r3, [pc, #308]	; (8000a48 <fsm_automatic+0x250>)
 8000914:	789b      	ldrb	r3, [r3, #2]
 8000916:	461a      	mov	r2, r3
 8000918:	4b4d      	ldr	r3, [pc, #308]	; (8000a50 <fsm_automatic+0x258>)
 800091a:	601a      	str	r2, [r3, #0]
			status=AUTO_RED;
 800091c:	4b48      	ldr	r3, [pc, #288]	; (8000a40 <fsm_automatic+0x248>)
 800091e:	2202      	movs	r2, #2
 8000920:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000922:	4b48      	ldr	r3, [pc, #288]	; (8000a44 <fsm_automatic+0x24c>)
 8000924:	2204      	movs	r2, #4
 8000926:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000928:	4b43      	ldr	r3, [pc, #268]	; (8000a38 <fsm_automatic+0x240>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
		}
		if(timer2_flag==1)
 800092e:	4b4b      	ldr	r3, [pc, #300]	; (8000a5c <fsm_automatic+0x264>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d10b      	bne.n	800094e <fsm_automatic+0x156>
		{
			status=AUTO_RED;
 8000936:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <fsm_automatic+0x248>)
 8000938:	2202      	movs	r2, #2
 800093a:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 800093c:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <fsm_automatic+0x24c>)
 800093e:	2204      	movs	r2, #4
 8000940:	601a      	str	r2, [r3, #0]
			mode=1;
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <fsm_automatic+0x244>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
			initial_flag=1;
 8000948:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <fsm_automatic+0x240>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]
		}
		updatebuffer(mode, lightbufferMod[0]);
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <fsm_automatic+0x244>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <fsm_automatic+0x268>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	4610      	mov	r0, r2
 800095c:	f7ff fcce 	bl	80002fc <updatebuffer>
		break;
 8000960:	e0e9      	b.n	8000b36 <fsm_automatic+0x33e>
	case 3:
		if(initial_flag==1)
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <fsm_automatic+0x240>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d113      	bne.n	8000992 <fsm_automatic+0x19a>
		{setTimer2(5000);
 800096a:	f241 3088 	movw	r0, #5000	; 0x1388
 800096e:	f000 fdcb 	bl	8001508 <setTimer2>
		blink_flag=1;
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <fsm_automatic+0x25c>)
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]
		initial_flag=0;
 8000978:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <fsm_automatic+0x240>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2104      	movs	r1, #4
 8000982:	4835      	ldr	r0, [pc, #212]	; (8000a58 <fsm_automatic+0x260>)
 8000984:	f001 fa09 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2120      	movs	r1, #32
 800098c:	4832      	ldr	r0, [pc, #200]	; (8000a58 <fsm_automatic+0x260>)
 800098e:	f001 fa04 	bl	8001d9a <HAL_GPIO_WritePin>
		}
		blinkLed(AMBER);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff feb6 	bl	8000704 <blinkLed>
		if(is_button_pressed(button2))
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fc3d 	bl	8000218 <is_button_pressed>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d00c      	beq.n	80009be <fsm_automatic+0x1c6>
		{
			status=MAN_YELLOW;
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <fsm_automatic+0x248>)
 80009a6:	220d      	movs	r2, #13
 80009a8:	601a      	str	r2, [r3, #0]
			status2=MAN_YELLOW;
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <fsm_automatic+0x24c>)
 80009ac:	220d      	movs	r2, #13
 80009ae:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 80009b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80009b4:	f000 fda8 	bl	8001508 <setTimer2>
			increasedTime(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fe51 	bl	8000660 <increasedTime>
		}
		if(is_button_pressed(button3))
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff fc2a 	bl	8000218 <is_button_pressed>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01a      	beq.n	8000a00 <fsm_automatic+0x208>
		{
			copyModtoRun();
 80009ca:	f7ff fe7b 	bl	80006c4 <copyModtoRun>
			mode=1;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <fsm_automatic+0x244>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
			indexled=0;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <fsm_automatic+0x23c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[0];
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <fsm_automatic+0x250>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <fsm_automatic+0x254>)
 80009e2:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[2];
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <fsm_automatic+0x250>)
 80009e6:	789b      	ldrb	r3, [r3, #2]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <fsm_automatic+0x258>)
 80009ec:	601a      	str	r2, [r3, #0]
			status=AUTO_RED;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <fsm_automatic+0x248>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <fsm_automatic+0x24c>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <fsm_automatic+0x240>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
		}
		if(timer2_flag==1)
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <fsm_automatic+0x264>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d10b      	bne.n	8000a20 <fsm_automatic+0x228>
		{
			status=AUTO_RED;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <fsm_automatic+0x248>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <fsm_automatic+0x24c>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	601a      	str	r2, [r3, #0]
			mode=1;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <fsm_automatic+0x244>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
			initial_flag=1;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <fsm_automatic+0x240>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
		}
		updatebuffer(mode, lightbufferMod[1]);
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <fsm_automatic+0x244>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <fsm_automatic+0x268>)
 8000a28:	785b      	ldrb	r3, [r3, #1]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	f7ff fc65 	bl	80002fc <updatebuffer>
		break;
 8000a32:	e080      	b.n	8000b36 <fsm_automatic+0x33e>
 8000a34:	20000064 	.word	0x20000064
 8000a38:	20000068 	.word	0x20000068
 8000a3c:	20000058 	.word	0x20000058
 8000a40:	2000007c 	.word	0x2000007c
 8000a44:	20000080 	.word	0x20000080
 8000a48:	20000020 	.word	0x20000020
 8000a4c:	2000005c 	.word	0x2000005c
 8000a50:	20000060 	.word	0x20000060
 8000a54:	200000d4 	.word	0x200000d4
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	200000dc 	.word	0x200000dc
 8000a60:	2000001c 	.word	0x2000001c
	case 4:
		if(initial_flag==1)
 8000a64:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <fsm_automatic+0x370>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d113      	bne.n	8000a94 <fsm_automatic+0x29c>
		{setTimer2(5000);
 8000a6c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a70:	f000 fd4a 	bl	8001508 <setTimer2>
		blink_flag=1;
 8000a74:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <fsm_automatic+0x374>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
		initial_flag=0;
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <fsm_automatic+0x370>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2108      	movs	r1, #8
 8000a84:	483a      	ldr	r0, [pc, #232]	; (8000b70 <fsm_automatic+0x378>)
 8000a86:	f001 f988 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	4838      	ldr	r0, [pc, #224]	; (8000b70 <fsm_automatic+0x378>)
 8000a90:	f001 f983 	bl	8001d9a <HAL_GPIO_WritePin>
		}
		blinkLed(GREEN);
 8000a94:	2002      	movs	r0, #2
 8000a96:	f7ff fe35 	bl	8000704 <blinkLed>
		if(is_button_pressed(button2))
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fbbc 	bl	8000218 <is_button_pressed>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00c      	beq.n	8000ac0 <fsm_automatic+0x2c8>
		{
			status=MAN_GREEN;
 8000aa6:	4b33      	ldr	r3, [pc, #204]	; (8000b74 <fsm_automatic+0x37c>)
 8000aa8:	220e      	movs	r2, #14
 8000aaa:	601a      	str	r2, [r3, #0]
			status2=MAN_GREEN;
 8000aac:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <fsm_automatic+0x380>)
 8000aae:	220e      	movs	r2, #14
 8000ab0:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 8000ab2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ab6:	f000 fd27 	bl	8001508 <setTimer2>
			increasedTime(2);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff fdd0 	bl	8000660 <increasedTime>

		}
		if(is_button_pressed(button3))
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f7ff fba9 	bl	8000218 <is_button_pressed>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d01a      	beq.n	8000b02 <fsm_automatic+0x30a>
		{
			copyModtoRun();
 8000acc:	f7ff fdfa 	bl	80006c4 <copyModtoRun>
			mode=1;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <fsm_automatic+0x384>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
			indexled=0;
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <fsm_automatic+0x388>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[0];
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <fsm_automatic+0x38c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <fsm_automatic+0x390>)
 8000ae4:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[2];
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <fsm_automatic+0x38c>)
 8000ae8:	789b      	ldrb	r3, [r3, #2]
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <fsm_automatic+0x394>)
 8000aee:	601a      	str	r2, [r3, #0]
			status=AUTO_RED;
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <fsm_automatic+0x37c>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <fsm_automatic+0x380>)
 8000af8:	2204      	movs	r2, #4
 8000afa:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <fsm_automatic+0x370>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
		}
		if(timer2_flag==1)
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <fsm_automatic+0x398>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10b      	bne.n	8000b22 <fsm_automatic+0x32a>
		{
			status=AUTO_RED;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <fsm_automatic+0x37c>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <fsm_automatic+0x380>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	601a      	str	r2, [r3, #0]
			mode=1;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <fsm_automatic+0x384>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
			initial_flag=1;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <fsm_automatic+0x370>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
		}
		updatebuffer(mode, lightbufferMod[2]);
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <fsm_automatic+0x384>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <fsm_automatic+0x39c>)
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4610      	mov	r0, r2
 8000b30:	f7ff fbe4 	bl	80002fc <updatebuffer>
		break;
 8000b34:	bf00      	nop
	}
	if(segment_flag==1)
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <fsm_automatic+0x3a0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d112      	bne.n	8000b64 <fsm_automatic+0x36c>
	{
	update7SEG(indexled++);
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <fsm_automatic+0x388>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	490e      	ldr	r1, [pc, #56]	; (8000b80 <fsm_automatic+0x388>)
 8000b46:	600a      	str	r2, [r1, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb7f 	bl	800024c <update7SEG>
	if(indexled>1)
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <fsm_automatic+0x388>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	dd02      	ble.n	8000b5c <fsm_automatic+0x364>
	{
		indexled=0;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <fsm_automatic+0x388>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
	}
	setTimer3(500);
 8000b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b60:	f000 fcee 	bl	8001540 <setTimer3>
	}
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000068 	.word	0x20000068
 8000b6c:	200000d4 	.word	0x200000d4
 8000b70:	40010800 	.word	0x40010800
 8000b74:	2000007c 	.word	0x2000007c
 8000b78:	20000080 	.word	0x20000080
 8000b7c:	20000058 	.word	0x20000058
 8000b80:	20000064 	.word	0x20000064
 8000b84:	20000020 	.word	0x20000020
 8000b88:	2000005c 	.word	0x2000005c
 8000b8c:	20000060 	.word	0x20000060
 8000b90:	200000dc 	.word	0x200000dc
 8000b94:	2000001c 	.word	0x2000001c
 8000b98:	200000e8 	.word	0x200000e8

08000b9c <display7SEG>:
int status2=0;
int man_time=10000;
int blink_time=500;

void display7SEG (int time)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	if(time==0)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d123      	bne.n	8000bf2 <display7SEG+0x56>
	{
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2101      	movs	r1, #1
 8000bae:	48c2      	ldr	r0, [pc, #776]	; (8000eb8 <display7SEG+0x31c>)
 8000bb0:	f001 f8f3 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	48bf      	ldr	r0, [pc, #764]	; (8000eb8 <display7SEG+0x31c>)
 8000bba:	f001 f8ee 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	48bd      	ldr	r0, [pc, #756]	; (8000eb8 <display7SEG+0x31c>)
 8000bc4:	f001 f8e9 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2108      	movs	r1, #8
 8000bcc:	48ba      	ldr	r0, [pc, #744]	; (8000eb8 <display7SEG+0x31c>)
 8000bce:	f001 f8e4 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	48b8      	ldr	r0, [pc, #736]	; (8000eb8 <display7SEG+0x31c>)
 8000bd8:	f001 f8df 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2120      	movs	r1, #32
 8000be0:	48b5      	ldr	r0, [pc, #724]	; (8000eb8 <display7SEG+0x31c>)
 8000be2:	f001 f8da 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	48b3      	ldr	r0, [pc, #716]	; (8000eb8 <display7SEG+0x31c>)
 8000bec:	f001 f8d5 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
	}
}
 8000bf0:	e15d      	b.n	8000eae <display7SEG+0x312>
	else if(time==1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d123      	bne.n	8000c40 <display7SEG+0xa4>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	48ae      	ldr	r0, [pc, #696]	; (8000eb8 <display7SEG+0x31c>)
 8000bfe:	f001 f8cc 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2102      	movs	r1, #2
 8000c06:	48ac      	ldr	r0, [pc, #688]	; (8000eb8 <display7SEG+0x31c>)
 8000c08:	f001 f8c7 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2104      	movs	r1, #4
 8000c10:	48a9      	ldr	r0, [pc, #676]	; (8000eb8 <display7SEG+0x31c>)
 8000c12:	f001 f8c2 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2108      	movs	r1, #8
 8000c1a:	48a7      	ldr	r0, [pc, #668]	; (8000eb8 <display7SEG+0x31c>)
 8000c1c:	f001 f8bd 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2110      	movs	r1, #16
 8000c24:	48a4      	ldr	r0, [pc, #656]	; (8000eb8 <display7SEG+0x31c>)
 8000c26:	f001 f8b8 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	48a2      	ldr	r0, [pc, #648]	; (8000eb8 <display7SEG+0x31c>)
 8000c30:	f001 f8b3 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	489f      	ldr	r0, [pc, #636]	; (8000eb8 <display7SEG+0x31c>)
 8000c3a:	f001 f8ae 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000c3e:	e136      	b.n	8000eae <display7SEG+0x312>
	else if(time==2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d123      	bne.n	8000c8e <display7SEG+0xf2>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2101      	movs	r1, #1
 8000c4a:	489b      	ldr	r0, [pc, #620]	; (8000eb8 <display7SEG+0x31c>)
 8000c4c:	f001 f8a5 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2102      	movs	r1, #2
 8000c54:	4898      	ldr	r0, [pc, #608]	; (8000eb8 <display7SEG+0x31c>)
 8000c56:	f001 f8a0 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4896      	ldr	r0, [pc, #600]	; (8000eb8 <display7SEG+0x31c>)
 8000c60:	f001 f89b 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2108      	movs	r1, #8
 8000c68:	4893      	ldr	r0, [pc, #588]	; (8000eb8 <display7SEG+0x31c>)
 8000c6a:	f001 f896 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2110      	movs	r1, #16
 8000c72:	4891      	ldr	r0, [pc, #580]	; (8000eb8 <display7SEG+0x31c>)
 8000c74:	f001 f891 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	488e      	ldr	r0, [pc, #568]	; (8000eb8 <display7SEG+0x31c>)
 8000c7e:	f001 f88c 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	488c      	ldr	r0, [pc, #560]	; (8000eb8 <display7SEG+0x31c>)
 8000c88:	f001 f887 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000c8c:	e10f      	b.n	8000eae <display7SEG+0x312>
	else if(time==3)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d123      	bne.n	8000cdc <display7SEG+0x140>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2101      	movs	r1, #1
 8000c98:	4887      	ldr	r0, [pc, #540]	; (8000eb8 <display7SEG+0x31c>)
 8000c9a:	f001 f87e 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4885      	ldr	r0, [pc, #532]	; (8000eb8 <display7SEG+0x31c>)
 8000ca4:	f001 f879 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2104      	movs	r1, #4
 8000cac:	4882      	ldr	r0, [pc, #520]	; (8000eb8 <display7SEG+0x31c>)
 8000cae:	f001 f874 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	4880      	ldr	r0, [pc, #512]	; (8000eb8 <display7SEG+0x31c>)
 8000cb8:	f001 f86f 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	487d      	ldr	r0, [pc, #500]	; (8000eb8 <display7SEG+0x31c>)
 8000cc2:	f001 f86a 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2120      	movs	r1, #32
 8000cca:	487b      	ldr	r0, [pc, #492]	; (8000eb8 <display7SEG+0x31c>)
 8000ccc:	f001 f865 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	4878      	ldr	r0, [pc, #480]	; (8000eb8 <display7SEG+0x31c>)
 8000cd6:	f001 f860 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000cda:	e0e8      	b.n	8000eae <display7SEG+0x312>
	else if(time==4)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d123      	bne.n	8000d2a <display7SEG+0x18e>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4874      	ldr	r0, [pc, #464]	; (8000eb8 <display7SEG+0x31c>)
 8000ce8:	f001 f857 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4871      	ldr	r0, [pc, #452]	; (8000eb8 <display7SEG+0x31c>)
 8000cf2:	f001 f852 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	486f      	ldr	r0, [pc, #444]	; (8000eb8 <display7SEG+0x31c>)
 8000cfc:	f001 f84d 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2108      	movs	r1, #8
 8000d04:	486c      	ldr	r0, [pc, #432]	; (8000eb8 <display7SEG+0x31c>)
 8000d06:	f001 f848 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	486a      	ldr	r0, [pc, #424]	; (8000eb8 <display7SEG+0x31c>)
 8000d10:	f001 f843 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2120      	movs	r1, #32
 8000d18:	4867      	ldr	r0, [pc, #412]	; (8000eb8 <display7SEG+0x31c>)
 8000d1a:	f001 f83e 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2140      	movs	r1, #64	; 0x40
 8000d22:	4865      	ldr	r0, [pc, #404]	; (8000eb8 <display7SEG+0x31c>)
 8000d24:	f001 f839 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000d28:	e0c1      	b.n	8000eae <display7SEG+0x312>
	else if(time==5)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d123      	bne.n	8000d78 <display7SEG+0x1dc>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	4860      	ldr	r0, [pc, #384]	; (8000eb8 <display7SEG+0x31c>)
 8000d36:	f001 f830 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	485e      	ldr	r0, [pc, #376]	; (8000eb8 <display7SEG+0x31c>)
 8000d40:	f001 f82b 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2104      	movs	r1, #4
 8000d48:	485b      	ldr	r0, [pc, #364]	; (8000eb8 <display7SEG+0x31c>)
 8000d4a:	f001 f826 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2108      	movs	r1, #8
 8000d52:	4859      	ldr	r0, [pc, #356]	; (8000eb8 <display7SEG+0x31c>)
 8000d54:	f001 f821 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	4856      	ldr	r0, [pc, #344]	; (8000eb8 <display7SEG+0x31c>)
 8000d5e:	f001 f81c 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2120      	movs	r1, #32
 8000d66:	4854      	ldr	r0, [pc, #336]	; (8000eb8 <display7SEG+0x31c>)
 8000d68:	f001 f817 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2140      	movs	r1, #64	; 0x40
 8000d70:	4851      	ldr	r0, [pc, #324]	; (8000eb8 <display7SEG+0x31c>)
 8000d72:	f001 f812 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000d76:	e09a      	b.n	8000eae <display7SEG+0x312>
	else if(time==6)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d123      	bne.n	8000dc6 <display7SEG+0x22a>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2101      	movs	r1, #1
 8000d82:	484d      	ldr	r0, [pc, #308]	; (8000eb8 <display7SEG+0x31c>)
 8000d84:	f001 f809 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	484a      	ldr	r0, [pc, #296]	; (8000eb8 <display7SEG+0x31c>)
 8000d8e:	f001 f804 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2104      	movs	r1, #4
 8000d96:	4848      	ldr	r0, [pc, #288]	; (8000eb8 <display7SEG+0x31c>)
 8000d98:	f000 ffff 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4845      	ldr	r0, [pc, #276]	; (8000eb8 <display7SEG+0x31c>)
 8000da2:	f000 fffa 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2110      	movs	r1, #16
 8000daa:	4843      	ldr	r0, [pc, #268]	; (8000eb8 <display7SEG+0x31c>)
 8000dac:	f000 fff5 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2120      	movs	r1, #32
 8000db4:	4840      	ldr	r0, [pc, #256]	; (8000eb8 <display7SEG+0x31c>)
 8000db6:	f000 fff0 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2140      	movs	r1, #64	; 0x40
 8000dbe:	483e      	ldr	r0, [pc, #248]	; (8000eb8 <display7SEG+0x31c>)
 8000dc0:	f000 ffeb 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000dc4:	e073      	b.n	8000eae <display7SEG+0x312>
	else if(time==7)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b07      	cmp	r3, #7
 8000dca:	d123      	bne.n	8000e14 <display7SEG+0x278>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4839      	ldr	r0, [pc, #228]	; (8000eb8 <display7SEG+0x31c>)
 8000dd2:	f000 ffe2 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4837      	ldr	r0, [pc, #220]	; (8000eb8 <display7SEG+0x31c>)
 8000ddc:	f000 ffdd 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2104      	movs	r1, #4
 8000de4:	4834      	ldr	r0, [pc, #208]	; (8000eb8 <display7SEG+0x31c>)
 8000de6:	f000 ffd8 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2108      	movs	r1, #8
 8000dee:	4832      	ldr	r0, [pc, #200]	; (8000eb8 <display7SEG+0x31c>)
 8000df0:	f000 ffd3 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2110      	movs	r1, #16
 8000df8:	482f      	ldr	r0, [pc, #188]	; (8000eb8 <display7SEG+0x31c>)
 8000dfa:	f000 ffce 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2120      	movs	r1, #32
 8000e02:	482d      	ldr	r0, [pc, #180]	; (8000eb8 <display7SEG+0x31c>)
 8000e04:	f000 ffc9 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	482a      	ldr	r0, [pc, #168]	; (8000eb8 <display7SEG+0x31c>)
 8000e0e:	f000 ffc4 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000e12:	e04c      	b.n	8000eae <display7SEG+0x312>
	else if(time==8)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d123      	bne.n	8000e62 <display7SEG+0x2c6>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4826      	ldr	r0, [pc, #152]	; (8000eb8 <display7SEG+0x31c>)
 8000e20:	f000 ffbb 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2102      	movs	r1, #2
 8000e28:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <display7SEG+0x31c>)
 8000e2a:	f000 ffb6 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2104      	movs	r1, #4
 8000e32:	4821      	ldr	r0, [pc, #132]	; (8000eb8 <display7SEG+0x31c>)
 8000e34:	f000 ffb1 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	481e      	ldr	r0, [pc, #120]	; (8000eb8 <display7SEG+0x31c>)
 8000e3e:	f000 ffac 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2110      	movs	r1, #16
 8000e46:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <display7SEG+0x31c>)
 8000e48:	f000 ffa7 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2120      	movs	r1, #32
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <display7SEG+0x31c>)
 8000e52:	f000 ffa2 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <display7SEG+0x31c>)
 8000e5c:	f000 ff9d 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000e60:	e025      	b.n	8000eae <display7SEG+0x312>
	else if(time==9)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b09      	cmp	r3, #9
 8000e66:	d122      	bne.n	8000eae <display7SEG+0x312>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <display7SEG+0x31c>)
 8000e6e:	f000 ff94 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2102      	movs	r1, #2
 8000e76:	4810      	ldr	r0, [pc, #64]	; (8000eb8 <display7SEG+0x31c>)
 8000e78:	f000 ff8f 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2104      	movs	r1, #4
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <display7SEG+0x31c>)
 8000e82:	f000 ff8a 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2108      	movs	r1, #8
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <display7SEG+0x31c>)
 8000e8c:	f000 ff85 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2110      	movs	r1, #16
 8000e94:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <display7SEG+0x31c>)
 8000e96:	f000 ff80 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <display7SEG+0x31c>)
 8000ea0:	f000 ff7b 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <display7SEG+0x31c>)
 8000eaa:	f000 ff76 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <display7SEGforled2>:

void display7SEGforled2(int time)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

	if(time==0)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d129      	bne.n	8000f1e <display7SEGforled2+0x62>
	{
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	48c8      	ldr	r0, [pc, #800]	; (80011f0 <display7SEGforled2+0x334>)
 8000ed0:	f000 ff63 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	48c5      	ldr	r0, [pc, #788]	; (80011f0 <display7SEGforled2+0x334>)
 8000edc:	f000 ff5d 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	48c2      	ldr	r0, [pc, #776]	; (80011f0 <display7SEGforled2+0x334>)
 8000ee8:	f000 ff57 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef2:	48bf      	ldr	r0, [pc, #764]	; (80011f0 <display7SEGforled2+0x334>)
 8000ef4:	f000 ff51 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efe:	48bc      	ldr	r0, [pc, #752]	; (80011f0 <display7SEGforled2+0x334>)
 8000f00:	f000 ff4b 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0a:	48b9      	ldr	r0, [pc, #740]	; (80011f0 <display7SEGforled2+0x334>)
 8000f0c:	f000 ff45 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f16:	48b6      	ldr	r0, [pc, #728]	; (80011f0 <display7SEGforled2+0x334>)
 8000f18:	f000 ff3f 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
	}
}
 8000f1c:	e196      	b.n	800124c <display7SEGforled2+0x390>
	else if(time==1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d129      	bne.n	8000f78 <display7SEGforled2+0xbc>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	48b1      	ldr	r0, [pc, #708]	; (80011f0 <display7SEGforled2+0x334>)
 8000f2a:	f000 ff36 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f34:	48ae      	ldr	r0, [pc, #696]	; (80011f0 <display7SEGforled2+0x334>)
 8000f36:	f000 ff30 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f40:	48ab      	ldr	r0, [pc, #684]	; (80011f0 <display7SEGforled2+0x334>)
 8000f42:	f000 ff2a 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4c:	48a8      	ldr	r0, [pc, #672]	; (80011f0 <display7SEGforled2+0x334>)
 8000f4e:	f000 ff24 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f58:	48a5      	ldr	r0, [pc, #660]	; (80011f0 <display7SEGforled2+0x334>)
 8000f5a:	f000 ff1e 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	48a2      	ldr	r0, [pc, #648]	; (80011f0 <display7SEGforled2+0x334>)
 8000f66:	f000 ff18 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f70:	489f      	ldr	r0, [pc, #636]	; (80011f0 <display7SEGforled2+0x334>)
 8000f72:	f000 ff12 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000f76:	e169      	b.n	800124c <display7SEGforled2+0x390>
	else if(time==2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d129      	bne.n	8000fd2 <display7SEGforled2+0x116>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	489b      	ldr	r0, [pc, #620]	; (80011f0 <display7SEGforled2+0x334>)
 8000f84:	f000 ff09 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	4898      	ldr	r0, [pc, #608]	; (80011f0 <display7SEGforled2+0x334>)
 8000f90:	f000 ff03 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9a:	4895      	ldr	r0, [pc, #596]	; (80011f0 <display7SEGforled2+0x334>)
 8000f9c:	f000 fefd 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa6:	4892      	ldr	r0, [pc, #584]	; (80011f0 <display7SEGforled2+0x334>)
 8000fa8:	f000 fef7 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb2:	488f      	ldr	r0, [pc, #572]	; (80011f0 <display7SEGforled2+0x334>)
 8000fb4:	f000 fef1 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbe:	488c      	ldr	r0, [pc, #560]	; (80011f0 <display7SEGforled2+0x334>)
 8000fc0:	f000 feeb 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fca:	4889      	ldr	r0, [pc, #548]	; (80011f0 <display7SEGforled2+0x334>)
 8000fcc:	f000 fee5 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000fd0:	e13c      	b.n	800124c <display7SEGforled2+0x390>
	else if(time==3)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d129      	bne.n	800102c <display7SEGforled2+0x170>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	4884      	ldr	r0, [pc, #528]	; (80011f0 <display7SEGforled2+0x334>)
 8000fde:	f000 fedc 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe8:	4881      	ldr	r0, [pc, #516]	; (80011f0 <display7SEGforled2+0x334>)
 8000fea:	f000 fed6 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff4:	487e      	ldr	r0, [pc, #504]	; (80011f0 <display7SEGforled2+0x334>)
 8000ff6:	f000 fed0 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001000:	487b      	ldr	r0, [pc, #492]	; (80011f0 <display7SEGforled2+0x334>)
 8001002:	f000 feca 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100c:	4878      	ldr	r0, [pc, #480]	; (80011f0 <display7SEGforled2+0x334>)
 800100e:	f000 fec4 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001018:	4875      	ldr	r0, [pc, #468]	; (80011f0 <display7SEGforled2+0x334>)
 800101a:	f000 febe 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001024:	4872      	ldr	r0, [pc, #456]	; (80011f0 <display7SEGforled2+0x334>)
 8001026:	f000 feb8 	bl	8001d9a <HAL_GPIO_WritePin>
}
 800102a:	e10f      	b.n	800124c <display7SEGforled2+0x390>
	else if(time==4)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b04      	cmp	r3, #4
 8001030:	d129      	bne.n	8001086 <display7SEGforled2+0x1ca>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	486e      	ldr	r0, [pc, #440]	; (80011f0 <display7SEGforled2+0x334>)
 8001038:	f000 feaf 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001042:	486b      	ldr	r0, [pc, #428]	; (80011f0 <display7SEGforled2+0x334>)
 8001044:	f000 fea9 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104e:	4868      	ldr	r0, [pc, #416]	; (80011f0 <display7SEGforled2+0x334>)
 8001050:	f000 fea3 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105a:	4865      	ldr	r0, [pc, #404]	; (80011f0 <display7SEGforled2+0x334>)
 800105c:	f000 fe9d 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001066:	4862      	ldr	r0, [pc, #392]	; (80011f0 <display7SEGforled2+0x334>)
 8001068:	f000 fe97 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001072:	485f      	ldr	r0, [pc, #380]	; (80011f0 <display7SEGforled2+0x334>)
 8001074:	f000 fe91 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	485c      	ldr	r0, [pc, #368]	; (80011f0 <display7SEGforled2+0x334>)
 8001080:	f000 fe8b 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8001084:	e0e2      	b.n	800124c <display7SEGforled2+0x390>
	else if(time==5)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d129      	bne.n	80010e0 <display7SEGforled2+0x224>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	4857      	ldr	r0, [pc, #348]	; (80011f0 <display7SEGforled2+0x334>)
 8001092:	f000 fe82 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	4854      	ldr	r0, [pc, #336]	; (80011f0 <display7SEGforled2+0x334>)
 800109e:	f000 fe7c 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	4851      	ldr	r0, [pc, #324]	; (80011f0 <display7SEGforled2+0x334>)
 80010aa:	f000 fe76 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b4:	484e      	ldr	r0, [pc, #312]	; (80011f0 <display7SEGforled2+0x334>)
 80010b6:	f000 fe70 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c0:	484b      	ldr	r0, [pc, #300]	; (80011f0 <display7SEGforled2+0x334>)
 80010c2:	f000 fe6a 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010cc:	4848      	ldr	r0, [pc, #288]	; (80011f0 <display7SEGforled2+0x334>)
 80010ce:	f000 fe64 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d8:	4845      	ldr	r0, [pc, #276]	; (80011f0 <display7SEGforled2+0x334>)
 80010da:	f000 fe5e 	bl	8001d9a <HAL_GPIO_WritePin>
}
 80010de:	e0b5      	b.n	800124c <display7SEGforled2+0x390>
	else if(time==6)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d129      	bne.n	800113a <display7SEGforled2+0x27e>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	4841      	ldr	r0, [pc, #260]	; (80011f0 <display7SEGforled2+0x334>)
 80010ec:	f000 fe55 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f6:	483e      	ldr	r0, [pc, #248]	; (80011f0 <display7SEGforled2+0x334>)
 80010f8:	f000 fe4f 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001102:	483b      	ldr	r0, [pc, #236]	; (80011f0 <display7SEGforled2+0x334>)
 8001104:	f000 fe49 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110e:	4838      	ldr	r0, [pc, #224]	; (80011f0 <display7SEGforled2+0x334>)
 8001110:	f000 fe43 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111a:	4835      	ldr	r0, [pc, #212]	; (80011f0 <display7SEGforled2+0x334>)
 800111c:	f000 fe3d 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	4832      	ldr	r0, [pc, #200]	; (80011f0 <display7SEGforled2+0x334>)
 8001128:	f000 fe37 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001132:	482f      	ldr	r0, [pc, #188]	; (80011f0 <display7SEGforled2+0x334>)
 8001134:	f000 fe31 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8001138:	e088      	b.n	800124c <display7SEGforled2+0x390>
	else if(time==7)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d129      	bne.n	8001194 <display7SEGforled2+0x2d8>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	482a      	ldr	r0, [pc, #168]	; (80011f0 <display7SEGforled2+0x334>)
 8001146:	f000 fe28 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001150:	4827      	ldr	r0, [pc, #156]	; (80011f0 <display7SEGforled2+0x334>)
 8001152:	f000 fe22 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	4824      	ldr	r0, [pc, #144]	; (80011f0 <display7SEGforled2+0x334>)
 800115e:	f000 fe1c 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <display7SEGforled2+0x334>)
 800116a:	f000 fe16 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	481e      	ldr	r0, [pc, #120]	; (80011f0 <display7SEGforled2+0x334>)
 8001176:	f000 fe10 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001180:	481b      	ldr	r0, [pc, #108]	; (80011f0 <display7SEGforled2+0x334>)
 8001182:	f000 fe0a 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	4818      	ldr	r0, [pc, #96]	; (80011f0 <display7SEGforled2+0x334>)
 800118e:	f000 fe04 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8001192:	e05b      	b.n	800124c <display7SEGforled2+0x390>
	else if(time==8)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b08      	cmp	r3, #8
 8001198:	d12c      	bne.n	80011f4 <display7SEGforled2+0x338>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	4814      	ldr	r0, [pc, #80]	; (80011f0 <display7SEGforled2+0x334>)
 80011a0:	f000 fdfb 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <display7SEGforled2+0x334>)
 80011ac:	f000 fdf5 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <display7SEGforled2+0x334>)
 80011b8:	f000 fdef 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <display7SEGforled2+0x334>)
 80011c4:	f000 fde9 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <display7SEGforled2+0x334>)
 80011d0:	f000 fde3 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <display7SEGforled2+0x334>)
 80011dc:	f000 fddd 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <display7SEGforled2+0x334>)
 80011e8:	f000 fdd7 	bl	8001d9a <HAL_GPIO_WritePin>
}
 80011ec:	e02e      	b.n	800124c <display7SEGforled2+0x390>
 80011ee:	bf00      	nop
 80011f0:	40010c00 	.word	0x40010c00
	else if(time==9)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b09      	cmp	r3, #9
 80011f8:	d128      	bne.n	800124c <display7SEGforled2+0x390>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	4815      	ldr	r0, [pc, #84]	; (8001254 <display7SEGforled2+0x398>)
 8001200:	f000 fdcb 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120a:	4812      	ldr	r0, [pc, #72]	; (8001254 <display7SEGforled2+0x398>)
 800120c:	f000 fdc5 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001216:	480f      	ldr	r0, [pc, #60]	; (8001254 <display7SEGforled2+0x398>)
 8001218:	f000 fdbf 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <display7SEGforled2+0x398>)
 8001224:	f000 fdb9 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <display7SEGforled2+0x398>)
 8001230:	f000 fdb3 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <display7SEGforled2+0x398>)
 800123c:	f000 fdad 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <display7SEGforled2+0x398>)
 8001248:	f000 fda7 	bl	8001d9a <HAL_GPIO_WritePin>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40010c00 	.word	0x40010c00

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f000 fa9a 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f80e 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f000 f894 	bl	8001390 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001268:	f000 f846 	bl	80012f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <main+0x24>)
 800126e:	f001 f9fd 	bl	800266c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initial();
 8001272:	f7ff f87f 	bl	8000374 <initial>
  while (1)
  {
	  fsm_automatic();
 8001276:	f7ff fabf 	bl	80007f8 <fsm_automatic>
  {
 800127a:	e7fc      	b.n	8001276 <main+0x1e>
 800127c:	20000084 	.word	0x20000084

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b090      	sub	sp, #64	; 0x40
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	2228      	movs	r2, #40	; 0x28
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fda4 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a6:	2301      	movs	r3, #1
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012aa:	2310      	movs	r3, #16
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fda0 	bl	8001dfc <HAL_RCC_OscConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012c2:	f000 f8e3 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c6:	230f      	movs	r3, #15
 80012c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 f80e 	bl	8002300 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ea:	f000 f8cf 	bl	800148c <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3740      	adds	r7, #64	; 0x40
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_TIM2_Init+0x94>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_TIM2_Init+0x94>)
 800131e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_TIM2_Init+0x94>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_TIM2_Init+0x94>)
 800132c:	2209      	movs	r2, #9
 800132e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_TIM2_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_TIM2_Init+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133c:	4813      	ldr	r0, [pc, #76]	; (800138c <MX_TIM2_Init+0x94>)
 800133e:	f001 f945 	bl	80025cc <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001348:	f000 f8a0 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_TIM2_Init+0x94>)
 800135a:	f001 fadb 	bl	8002914 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001364:	f000 f892 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_TIM2_Init+0x94>)
 8001376:	f001 fca3 	bl	8002cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001380:	f000 f884 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000084 	.word	0x20000084

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a28      	ldr	r2, [pc, #160]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a22      	ldr	r2, [pc, #136]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80013ec:	2200      	movs	r2, #0
 80013ee:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80013f2:	481d      	ldr	r0, [pc, #116]	; (8001468 <MX_GPIO_Init+0xd8>)
 80013f4:	f000 fcd1 	bl	8001d9a <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_1_Pin|P_2_Pin|P_3_Pin|P1_4_Pin
 80013f8:	2200      	movs	r2, #0
 80013fa:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80013fe:	481b      	ldr	r0, [pc, #108]	; (800146c <MX_GPIO_Init+0xdc>)
 8001400:	f000 fccb 	bl	8001d9a <HAL_GPIO_WritePin>
                          |P1_5_Pin|P1_6_Pin|P1_7_Pin|P_4_Pin
                          |P_5_Pin|P_6_Pin|P_7_Pin|P1_1_Pin
                          |P1_2_Pin|P1_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001404:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	4815      	ldr	r0, [pc, #84]	; (8001470 <MX_GPIO_Init+0xe0>)
 800141a:	f000 fb2b 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 800141e:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001422:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2302      	movs	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	480c      	ldr	r0, [pc, #48]	; (8001468 <MX_GPIO_Init+0xd8>)
 8001438:	f000 fb1c 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_1_Pin P_2_Pin P_3_Pin P1_4_Pin
                           P1_5_Pin P1_6_Pin P1_7_Pin P_4_Pin
                           P_5_Pin P_6_Pin P_7_Pin P1_1_Pin
                           P1_2_Pin P1_3_Pin */
  GPIO_InitStruct.Pin = P_1_Pin|P_2_Pin|P_3_Pin|P1_4_Pin
 800143c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001440:	613b      	str	r3, [r7, #16]
                          |P1_5_Pin|P1_6_Pin|P1_7_Pin|P_4_Pin
                          |P_5_Pin|P_6_Pin|P_7_Pin|P1_1_Pin
                          |P1_2_Pin|P1_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2302      	movs	r3, #2
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_GPIO_Init+0xdc>)
 8001456:	f000 fb0d 	bl	8001a74 <HAL_GPIO_Init>

}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	40010800 	.word	0x40010800
 800146c:	40010c00 	.word	0x40010c00
 8001470:	40011000 	.word	0x40011000

08001474 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	timerRun();
 800147c:	f000 f87c 	bl	8001578 <timerRun>
	button_reading();
 8001480:	f7fe fe64 	bl	800014c <button_reading>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <Error_Handler+0x8>
	...

08001498 <setBlink>:
int segment_counter=0;
int segment_flag=0;
int button_counter=0;
int button_flag=0;
void setBlink(int duration)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	blink_counter=duration/10;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <setBlink+0x2c>)
 80014a4:	fb82 1203 	smull	r1, r2, r2, r3
 80014a8:	1092      	asrs	r2, r2, #2
 80014aa:	17db      	asrs	r3, r3, #31
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <setBlink+0x30>)
 80014b0:	6013      	str	r3, [r2, #0]
	blink_flag=0;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <setBlink+0x34>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	66666667 	.word	0x66666667
 80014c8:	200000d8 	.word	0x200000d8
 80014cc:	200000d4 	.word	0x200000d4

080014d0 <setTimer1>:
void setTimer1(int duration)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/10;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <setTimer1+0x2c>)
 80014dc:	fb82 1203 	smull	r1, r2, r2, r3
 80014e0:	1092      	asrs	r2, r2, #2
 80014e2:	17db      	asrs	r3, r3, #31
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	4a06      	ldr	r2, [pc, #24]	; (8001500 <setTimer1+0x30>)
 80014e8:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <setTimer1+0x34>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	66666667 	.word	0x66666667
 8001500:	200000d0 	.word	0x200000d0
 8001504:	200000cc 	.word	0x200000cc

08001508 <setTimer2>:
void setTimer2(int duration)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	timer2_counter=duration/10;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <setTimer2+0x2c>)
 8001514:	fb82 1203 	smull	r1, r2, r2, r3
 8001518:	1092      	asrs	r2, r2, #2
 800151a:	17db      	asrs	r3, r3, #31
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	4a06      	ldr	r2, [pc, #24]	; (8001538 <setTimer2+0x30>)
 8001520:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <setTimer2+0x34>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	66666667 	.word	0x66666667
 8001538:	200000e0 	.word	0x200000e0
 800153c:	200000dc 	.word	0x200000dc

08001540 <setTimer3>:
void setTimer3(int duration)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	segment_counter=duration/10;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <setTimer3+0x2c>)
 800154c:	fb82 1203 	smull	r1, r2, r2, r3
 8001550:	1092      	asrs	r2, r2, #2
 8001552:	17db      	asrs	r3, r3, #31
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	4a06      	ldr	r2, [pc, #24]	; (8001570 <setTimer3+0x30>)
 8001558:	6013      	str	r3, [r2, #0]
	segment_flag=0;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <setTimer3+0x34>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	66666667 	.word	0x66666667
 8001570:	200000e4 	.word	0x200000e4
 8001574:	200000e8 	.word	0x200000e8

08001578 <timerRun>:
{
	button_counter=duration/10;
	button_flag=0;
}
void timerRun()
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
	if(timer1_counter>0)
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <timerRun+0xac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	dd0b      	ble.n	800159c <timerRun+0x24>
	{
		timer1_counter--;
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <timerRun+0xac>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3b01      	subs	r3, #1
 800158a:	4a26      	ldr	r2, [pc, #152]	; (8001624 <timerRun+0xac>)
 800158c:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0)
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <timerRun+0xac>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	dc02      	bgt.n	800159c <timerRun+0x24>
		{
			timer1_flag=1;
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <timerRun+0xb0>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0)
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <timerRun+0xb4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	dd0b      	ble.n	80015bc <timerRun+0x44>
		{
			timer2_counter--;
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <timerRun+0xb4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	4a20      	ldr	r2, [pc, #128]	; (800162c <timerRun+0xb4>)
 80015ac:	6013      	str	r3, [r2, #0]
			if(timer2_counter<=0)
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <timerRun+0xb4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	dc02      	bgt.n	80015bc <timerRun+0x44>
			{
				timer2_flag=1;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <timerRun+0xb8>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
			}
		}
	if(segment_counter>0)
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <timerRun+0xbc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dd0b      	ble.n	80015dc <timerRun+0x64>
	{
		segment_counter--;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <timerRun+0xbc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <timerRun+0xbc>)
 80015cc:	6013      	str	r3, [r2, #0]
		if(segment_counter<=0)
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <timerRun+0xbc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	dc02      	bgt.n	80015dc <timerRun+0x64>
		{
			segment_flag=1;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <timerRun+0xc0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
		}
	}
	if(blink_counter>0)
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <timerRun+0xc4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dd0b      	ble.n	80015fc <timerRun+0x84>
	{
		blink_counter--;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <timerRun+0xc4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <timerRun+0xc4>)
 80015ec:	6013      	str	r3, [r2, #0]
		if(blink_counter<=0)
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <timerRun+0xc4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	dc02      	bgt.n	80015fc <timerRun+0x84>
		{
			blink_flag=1;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <timerRun+0xc8>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
		}
	}
	if(button_counter>0)
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <timerRun+0xcc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	dd0b      	ble.n	800161c <timerRun+0xa4>
	{
		button_counter--;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <timerRun+0xcc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3b01      	subs	r3, #1
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <timerRun+0xcc>)
 800160c:	6013      	str	r3, [r2, #0]
		if(button_counter<=0)
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <timerRun+0xcc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dc02      	bgt.n	800161c <timerRun+0xa4>
		{
			button_flag=1;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <timerRun+0xd0>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	200000d0 	.word	0x200000d0
 8001628:	200000cc 	.word	0x200000cc
 800162c:	200000e0 	.word	0x200000e0
 8001630:	200000dc 	.word	0x200000dc
 8001634:	200000e4 	.word	0x200000e4
 8001638:	200000e8 	.word	0x200000e8
 800163c:	200000d8 	.word	0x200000d8
 8001640:	200000d4 	.word	0x200000d4
 8001644:	200000ec 	.word	0x200000ec
 8001648:	200000f0 	.word	0x200000f0

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_MspInit+0x40>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_MspInit+0x40>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_MspInit+0x40>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_MspInit+0x40>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_MspInit+0x40>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_MspInit+0x40>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a0:	d113      	bne.n	80016ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_TIM_Base_MspInit+0x44>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_TIM_Base_MspInit+0x44>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_TIM_Base_MspInit+0x44>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	201c      	movs	r0, #28
 80016c0:	f000 f9a1 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016c4:	201c      	movs	r0, #28
 80016c6:	f000 f9ba 	bl	8001a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <NMI_Handler+0x4>

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171e:	f000 f87f 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <TIM2_IRQHandler+0x10>)
 800172e:	f000 ffe9 	bl	8002704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000084 	.word	0x20000084

0800173c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800176e:	f7ff ffe5 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f001 fb0f 	bl	8002d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001776:	f7ff fd6f 	bl	8001258 <main>
  bx lr
 800177a:	4770      	bx	lr
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001784:	08002e2c 	.word	0x08002e2c
  ldr r2, =_sbss
 8001788:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800178c:	200000f8 	.word	0x200000f8

08001790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC1_2_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x28>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x28>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f923 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff ff4c 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f93b 	bl	8001a5a <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 f903 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000024 	.word	0x20000024
 8001818:	2000002c 	.word	0x2000002c
 800181c:	20000028 	.word	0x20000028

08001820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_IncTick+0x1c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_IncTick+0x20>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a03      	ldr	r2, [pc, #12]	; (8001840 <HAL_IncTick+0x20>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	2000002c 	.word	0x2000002c
 8001840:	200000f4 	.word	0x200000f4

08001844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b02      	ldr	r3, [pc, #8]	; (8001854 <HAL_GetTick+0x10>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	200000f4 	.word	0x200000f4

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4906      	ldr	r1, [pc, #24]	; (80018f0 <__NVIC_EnableIRQ+0x34>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff90 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff2d 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff42 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff90 	bl	8001948 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5f 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff35 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b08b      	sub	sp, #44	; 0x2c
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	e161      	b.n	8001d4c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8150 	bne.w	8001d46 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4a97      	ldr	r2, [pc, #604]	; (8001d08 <HAL_GPIO_Init+0x294>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d05e      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ab0:	4a95      	ldr	r2, [pc, #596]	; (8001d08 <HAL_GPIO_Init+0x294>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d875      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ab6:	4a95      	ldr	r2, [pc, #596]	; (8001d0c <HAL_GPIO_Init+0x298>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d058      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001abc:	4a93      	ldr	r2, [pc, #588]	; (8001d0c <HAL_GPIO_Init+0x298>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d86f      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ac2:	4a93      	ldr	r2, [pc, #588]	; (8001d10 <HAL_GPIO_Init+0x29c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d052      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ac8:	4a91      	ldr	r2, [pc, #580]	; (8001d10 <HAL_GPIO_Init+0x29c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d869      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ace:	4a91      	ldr	r2, [pc, #580]	; (8001d14 <HAL_GPIO_Init+0x2a0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d04c      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ad4:	4a8f      	ldr	r2, [pc, #572]	; (8001d14 <HAL_GPIO_Init+0x2a0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d863      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ada:	4a8f      	ldr	r2, [pc, #572]	; (8001d18 <HAL_GPIO_Init+0x2a4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d046      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ae0:	4a8d      	ldr	r2, [pc, #564]	; (8001d18 <HAL_GPIO_Init+0x2a4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d85d      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d82a      	bhi.n	8001b40 <HAL_GPIO_Init+0xcc>
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d859      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <HAL_GPIO_Init+0x80>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b49 	.word	0x08001b49
 8001afc:	08001b5b 	.word	0x08001b5b
 8001b00:	08001b9d 	.word	0x08001b9d
 8001b04:	08001ba3 	.word	0x08001ba3
 8001b08:	08001ba3 	.word	0x08001ba3
 8001b0c:	08001ba3 	.word	0x08001ba3
 8001b10:	08001ba3 	.word	0x08001ba3
 8001b14:	08001ba3 	.word	0x08001ba3
 8001b18:	08001ba3 	.word	0x08001ba3
 8001b1c:	08001ba3 	.word	0x08001ba3
 8001b20:	08001ba3 	.word	0x08001ba3
 8001b24:	08001ba3 	.word	0x08001ba3
 8001b28:	08001ba3 	.word	0x08001ba3
 8001b2c:	08001ba3 	.word	0x08001ba3
 8001b30:	08001ba3 	.word	0x08001ba3
 8001b34:	08001ba3 	.word	0x08001ba3
 8001b38:	08001b51 	.word	0x08001b51
 8001b3c:	08001b65 	.word	0x08001b65
 8001b40:	4a76      	ldr	r2, [pc, #472]	; (8001d1c <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b46:	e02c      	b.n	8001ba2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e029      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	3304      	adds	r3, #4
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e024      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	3308      	adds	r3, #8
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e01f      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	330c      	adds	r3, #12
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e01a      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b76:	2304      	movs	r3, #4
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e013      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d105      	bne.n	8001b90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b84:	2308      	movs	r3, #8
 8001b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	611a      	str	r2, [r3, #16]
          break;
 8001b8e:	e009      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	615a      	str	r2, [r3, #20]
          break;
 8001b9a:	e003      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
          break;
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          break;
 8001ba2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d801      	bhi.n	8001bae <HAL_GPIO_Init+0x13a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_Init+0x13e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2bff      	cmp	r3, #255	; 0xff
 8001bb8:	d802      	bhi.n	8001bc0 <HAL_GPIO_Init+0x14c>
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	e002      	b.n	8001bc6 <HAL_GPIO_Init+0x152>
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	3b08      	subs	r3, #8
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	210f      	movs	r1, #15
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	6a39      	ldr	r1, [r7, #32]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80a9 	beq.w	8001d46 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a49      	ldr	r2, [pc, #292]	; (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c0c:	4a45      	ldr	r2, [pc, #276]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3d      	ldr	r2, [pc, #244]	; (8001d28 <HAL_GPIO_Init+0x2b4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00d      	beq.n	8001c54 <HAL_GPIO_Init+0x1e0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <HAL_GPIO_Init+0x2b8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x1dc>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3b      	ldr	r2, [pc, #236]	; (8001d30 <HAL_GPIO_Init+0x2bc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x1e2>
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x1e2>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x1e2>
 8001c54:	2300      	movs	r3, #0
 8001c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c66:	492f      	ldr	r1, [pc, #188]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	492b      	ldr	r1, [pc, #172]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4921      	ldr	r1, [pc, #132]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	491d      	ldr	r1, [pc, #116]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4917      	ldr	r1, [pc, #92]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4913      	ldr	r1, [pc, #76]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01f      	beq.n	8001d38 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	490d      	ldr	r1, [pc, #52]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60cb      	str	r3, [r1, #12]
 8001d04:	e01f      	b.n	8001d46 <HAL_GPIO_Init+0x2d2>
 8001d06:	bf00      	nop
 8001d08:	10320000 	.word	0x10320000
 8001d0c:	10310000 	.word	0x10310000
 8001d10:	10220000 	.word	0x10220000
 8001d14:	10210000 	.word	0x10210000
 8001d18:	10120000 	.word	0x10120000
 8001d1c:	10110000 	.word	0x10110000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	40011000 	.word	0x40011000
 8001d34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_GPIO_Init+0x2f4>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	4909      	ldr	r1, [pc, #36]	; (8001d68 <HAL_GPIO_Init+0x2f4>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f47f ae96 	bne.w	8001a88 <HAL_GPIO_Init+0x14>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	372c      	adds	r7, #44	; 0x2c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001daa:	787b      	ldrb	r3, [r7, #1]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db6:	e003      	b.n	8001dc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ddc:	887a      	ldrh	r2, [r7, #2]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	400b      	ands	r3, r1
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e272      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8087 	beq.w	8001f2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d00c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e28:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d112      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e40:	d10b      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d06c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x12c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d168      	bne.n	8001f28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e24c      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x76>
 8001e64:	4b80      	ldr	r3, [pc, #512]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7f      	ldr	r2, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e02e      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b78      	ldr	r3, [pc, #480]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a77      	ldr	r2, [pc, #476]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xbc>
 8001e9e:	4b72      	ldr	r3, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a71      	ldr	r2, [pc, #452]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6a      	ldr	r2, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fcb4 	bl	8001844 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fcb0 	bl	8001844 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e200      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xe4>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fca0 	bl	8001844 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fc9c 	bl	8001844 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1ec      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x10c>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f42:	4b49      	ldr	r3, [pc, #292]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1c0      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4939      	ldr	r1, [pc, #228]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff fc55 	bl	8001844 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fc51 	bl	8001844 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1a1      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fc34 	bl	8001844 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fc30 	bl	8001844 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e180      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03a      	beq.n	8002080 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d019      	beq.n	8002046 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7ff fc14 	bl	8001844 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fc10 	bl	8001844 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e160      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203e:	2001      	movs	r0, #1
 8002040:	f000 faa6 	bl	8002590 <RCC_Delay>
 8002044:	e01c      	b.n	8002080 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7ff fbfa 	bl	8001844 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002052:	e00f      	b.n	8002074 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff fbf6 	bl	8001844 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d908      	bls.n	8002074 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e146      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	42420000 	.word	0x42420000
 8002070:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b92      	ldr	r3, [pc, #584]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e9      	bne.n	8002054 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a6 	beq.w	80021da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a87      	ldr	r2, [pc, #540]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a7e      	ldr	r2, [pc, #504]	; (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7ff fbb7 	bl	8001844 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7ff fbb3 	bl	8001844 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e103      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b75      	ldr	r3, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x312>
 8002100:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a6e      	ldr	r2, [pc, #440]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e02d      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x334>
 8002116:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a69      	ldr	r2, [pc, #420]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a66      	ldr	r2, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	e01c      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x356>
 8002138:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a60      	ldr	r2, [pc, #384]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a5a      	ldr	r2, [pc, #360]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b58      	ldr	r3, [pc, #352]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff fb67 	bl	8001844 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff fb63 	bl	8001844 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0b1      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <HAL_RCC_OscConfig+0x37e>
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7ff fb51 	bl	8001844 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff fb4d 	bl	8001844 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e09b      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a3b      	ldr	r2, [pc, #236]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d061      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d146      	bne.n	8002286 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fb21 	bl	8001844 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7ff fb1d 	bl	8001844 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e06d      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d108      	bne.n	8002240 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4921      	ldr	r1, [pc, #132]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a19      	ldr	r1, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	430b      	orrs	r3, r1
 8002252:	491b      	ldr	r1, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x4cc>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff faf1 	bl	8001844 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff faed 	bl	8001844 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e03d      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x46a>
 8002284:	e035      	b.n	80022f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_OscConfig+0x4cc>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fada 	bl	8001844 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff fad6 	bl	8001844 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e026      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x498>
 80022b2:	e01e      	b.n	80022f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e019      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_OscConfig+0x500>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0d0      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d910      	bls.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4965      	ldr	r1, [pc, #404]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b8      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a58      	ldr	r2, [pc, #352]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002366:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	494d      	ldr	r1, [pc, #308]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d040      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d115      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e07f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e073      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06b      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4936      	ldr	r1, [pc, #216]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff fa28 	bl	8001844 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff fa24 	bl	8001844 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e053      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d210      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 0207 	bic.w	r2, r3, #7
 8002436:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e032      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4916      	ldr	r1, [pc, #88]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	490e      	ldr	r1, [pc, #56]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248e:	f000 f821 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	490a      	ldr	r1, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1cc>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1d0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f986 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40022000 	.word	0x40022000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08002e14 	.word	0x08002e14
 80024cc:	20000024 	.word	0x20000024
 80024d0:	20000028 	.word	0x20000028

080024d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b490      	push	{r4, r7}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_GetSysClockFreq+0xac>)
 80024dc:	1d3c      	adds	r4, r7, #4
 80024de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024e4:	f240 2301 	movw	r3, #513	; 0x201
 80024e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d002      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x40>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d003      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x46>
 8002512:	e02b      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002516:	623b      	str	r3, [r7, #32]
      break;
 8002518:	e02b      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	0c9b      	lsrs	r3, r3, #18
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3328      	adds	r3, #40	; 0x28
 8002524:	443b      	add	r3, r7
 8002526:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800252a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d012      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	0c5b      	lsrs	r3, r3, #17
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	3328      	adds	r3, #40	; 0x28
 8002542:	443b      	add	r3, r7
 8002544:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002548:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb4>)
 800254e:	fb03 f202 	mul.w	r2, r3, r2
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	e004      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	623b      	str	r3, [r7, #32]
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb4>)
 800256e:	623b      	str	r3, [r7, #32]
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	6a3b      	ldr	r3, [r7, #32]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bc90      	pop	{r4, r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	08002e04 	.word	0x08002e04
 8002584:	40021000 	.word	0x40021000
 8002588:	007a1200 	.word	0x007a1200
 800258c:	003d0900 	.word	0x003d0900

08002590 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <RCC_Delay+0x34>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <RCC_Delay+0x38>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0a5b      	lsrs	r3, r3, #9
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025ac:	bf00      	nop
  }
  while (Delay --);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1e5a      	subs	r2, r3, #1
 80025b2:	60fa      	str	r2, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f9      	bne.n	80025ac <RCC_Delay+0x1c>
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	20000024 	.word	0x20000024
 80025c8:	10624dd3 	.word	0x10624dd3

080025cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e041      	b.n	8002662 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff f84c 	bl	8001690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3304      	adds	r3, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f000 fa6a 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d001      	beq.n	8002684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e035      	b.n	80026f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a16      	ldr	r2, [pc, #88]	; (80026fc <HAL_TIM_Base_Start_IT+0x90>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d009      	beq.n	80026ba <HAL_TIM_Base_Start_IT+0x4e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ae:	d004      	beq.n	80026ba <HAL_TIM_Base_Start_IT+0x4e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a12      	ldr	r2, [pc, #72]	; (8002700 <HAL_TIM_Base_Start_IT+0x94>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d111      	bne.n	80026de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d010      	beq.n	80026ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026dc:	e007      	b.n	80026ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40012c00 	.word	0x40012c00
 8002700:	40000400 	.word	0x40000400

08002704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d122      	bne.n	8002760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b02      	cmp	r3, #2
 8002726:	d11b      	bne.n	8002760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0202 	mvn.w	r2, #2
 8002730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f9b1 	bl	8002aae <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f9a4 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f9b3 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b04      	cmp	r3, #4
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b04      	cmp	r3, #4
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0204 	mvn.w	r2, #4
 8002784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2202      	movs	r2, #2
 800278a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f987 	bl	8002aae <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f97a 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f989 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0208 	mvn.w	r2, #8
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2204      	movs	r2, #4
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f95d 	bl	8002aae <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f950 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f95f 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b10      	cmp	r3, #16
 8002814:	d122      	bne.n	800285c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b10      	cmp	r3, #16
 8002822:	d11b      	bne.n	800285c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0210 	mvn.w	r2, #16
 800282c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2208      	movs	r2, #8
 8002832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f933 	bl	8002aae <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f926 	bl	8002a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f935 	bl	8002ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10e      	bne.n	8002888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0201 	mvn.w	r2, #1
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe fdf6 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b80      	cmp	r3, #128	; 0x80
 8002894:	d10e      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b80      	cmp	r3, #128	; 0x80
 80028a2:	d107      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fa67 	bl	8002d82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8f9 	bl	8002ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d107      	bne.n	800290c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0220 	mvn.w	r2, #32
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa32 	bl	8002d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_TIM_ConfigClockSource+0x18>
 8002928:	2302      	movs	r3, #2
 800292a:	e0b3      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x180>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800294a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002952:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002964:	d03e      	beq.n	80029e4 <HAL_TIM_ConfigClockSource+0xd0>
 8002966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296a:	f200 8087 	bhi.w	8002a7c <HAL_TIM_ConfigClockSource+0x168>
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	f000 8085 	beq.w	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297a:	d87f      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x168>
 800297c:	2b70      	cmp	r3, #112	; 0x70
 800297e:	d01a      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0xa2>
 8002980:	2b70      	cmp	r3, #112	; 0x70
 8002982:	d87b      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x168>
 8002984:	2b60      	cmp	r3, #96	; 0x60
 8002986:	d050      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x116>
 8002988:	2b60      	cmp	r3, #96	; 0x60
 800298a:	d877      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x168>
 800298c:	2b50      	cmp	r3, #80	; 0x50
 800298e:	d03c      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0xf6>
 8002990:	2b50      	cmp	r3, #80	; 0x50
 8002992:	d873      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x168>
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d058      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x136>
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d86f      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x168>
 800299c:	2b30      	cmp	r3, #48	; 0x30
 800299e:	d064      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x156>
 80029a0:	2b30      	cmp	r3, #48	; 0x30
 80029a2:	d86b      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x168>
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d060      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x156>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d867      	bhi.n	8002a7c <HAL_TIM_ConfigClockSource+0x168>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d05c      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x156>
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d05a      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029b4:	e062      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f000 f95c 	bl	8002c82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	609a      	str	r2, [r3, #8]
      break;
 80029e2:	e04e      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6899      	ldr	r1, [r3, #8]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f000 f945 	bl	8002c82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a06:	609a      	str	r2, [r3, #8]
      break;
 8002a08:	e03b      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f000 f8bc 	bl	8002b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2150      	movs	r1, #80	; 0x50
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f913 	bl	8002c4e <TIM_ITRx_SetConfig>
      break;
 8002a28:	e02b      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f000 f8da 	bl	8002bf0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2160      	movs	r1, #96	; 0x60
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f903 	bl	8002c4e <TIM_ITRx_SetConfig>
      break;
 8002a48:	e01b      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f000 f89c 	bl	8002b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2140      	movs	r1, #64	; 0x40
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f8f3 	bl	8002c4e <TIM_ITRx_SetConfig>
      break;
 8002a68:	e00b      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f000 f8ea 	bl	8002c4e <TIM_ITRx_SetConfig>
        break;
 8002a7a:	e002      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <TIM_Base_SetConfig+0xa8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <TIM_Base_SetConfig+0x28>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0x28>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <TIM_Base_SetConfig+0xac>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <TIM_Base_SetConfig+0xa8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0x52>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0x52>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <TIM_Base_SetConfig+0xac>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <TIM_Base_SetConfig+0xa8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d103      	bne.n	8002b7c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	615a      	str	r2, [r3, #20]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40000400 	.word	0x40000400

08002b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0201 	bic.w	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f023 030a 	bic.w	r3, r3, #10
 8002bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f023 0210 	bic.w	r2, r3, #16
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	031b      	lsls	r3, r3, #12
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	621a      	str	r2, [r3, #32]
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f043 0307 	orr.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b087      	sub	sp, #28
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	021a      	lsls	r2, r3, #8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	609a      	str	r2, [r3, #8]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e041      	b.n	8002d5c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d009      	beq.n	8002d30 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d004      	beq.n	8002d30 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d10c      	bne.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40000400 	.word	0x40000400

08002d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <__libc_init_array>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	2600      	movs	r6, #0
 8002d98:	4d0c      	ldr	r5, [pc, #48]	; (8002dcc <__libc_init_array+0x38>)
 8002d9a:	4c0d      	ldr	r4, [pc, #52]	; (8002dd0 <__libc_init_array+0x3c>)
 8002d9c:	1b64      	subs	r4, r4, r5
 8002d9e:	10a4      	asrs	r4, r4, #2
 8002da0:	42a6      	cmp	r6, r4
 8002da2:	d109      	bne.n	8002db8 <__libc_init_array+0x24>
 8002da4:	f000 f822 	bl	8002dec <_init>
 8002da8:	2600      	movs	r6, #0
 8002daa:	4d0a      	ldr	r5, [pc, #40]	; (8002dd4 <__libc_init_array+0x40>)
 8002dac:	4c0a      	ldr	r4, [pc, #40]	; (8002dd8 <__libc_init_array+0x44>)
 8002dae:	1b64      	subs	r4, r4, r5
 8002db0:	10a4      	asrs	r4, r4, #2
 8002db2:	42a6      	cmp	r6, r4
 8002db4:	d105      	bne.n	8002dc2 <__libc_init_array+0x2e>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbc:	4798      	blx	r3
 8002dbe:	3601      	adds	r6, #1
 8002dc0:	e7ee      	b.n	8002da0 <__libc_init_array+0xc>
 8002dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc6:	4798      	blx	r3
 8002dc8:	3601      	adds	r6, #1
 8002dca:	e7f2      	b.n	8002db2 <__libc_init_array+0x1e>
 8002dcc:	08002e24 	.word	0x08002e24
 8002dd0:	08002e24 	.word	0x08002e24
 8002dd4:	08002e24 	.word	0x08002e24
 8002dd8:	08002e28 	.word	0x08002e28

08002ddc <memset>:
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4402      	add	r2, r0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <_init>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr

08002df8 <_fini>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	bf00      	nop
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr
